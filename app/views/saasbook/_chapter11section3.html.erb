    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="single-responsibility-principle">
<h1><span class="section-number">11.3. </span>Single Responsibility Principle<a class="headerlink" href="#single-responsibility-principle" title="Permalink to this headline">¶</a></h1>
<p>The <strong>Single Responsibility Principle</strong> (SRP) of SOLID states that a class should have one
and only one responsibility—that is, only one reason to change. For example, in Section
5.2, when we added single sign-on to RottenPotatoes, we created a new <code class="code docutils literal notranslate"><span class="pre">SessionsController</span></code>
to handle the sign-on interaction. An alternate strategy would be to augment
<code class="code docutils literal notranslate"><span class="pre">MoviegoersController</span></code>, since sign-on is an action associated with moviegoers. Indeed, before
the single sign-on approach described in Chapter 5, this was the recommended way to implementing
password-based authentication in earlier versions of Rails. But such a scheme would require
changing the <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code> model and controller whenever we wanted to change the authentication
strategy, even though the “essence” of a Moviegoer doesn’t really depend on how they sign
in. In MVC, each controller should specialize in dealing with
one resource; an authenticated user session is a distinct resource from the user himself, and
deserves its own RESTful actions and model methods. As a rule of thumb, if you cannot describe
the responsibility of a class in 25 words or less, it may have more than one responsibility,
and the new ones should be split out into their own classes.</p>
<p>In statically typed compiled languages, the cost of violating SRP is obvious: any change to a
class requires recompilation and may also trigger recompilation or relinking of other classes
that depend on it. Because we don’t pay this price in interpreted dynamic languages, it’s easy
to let classes get too large and violate SRP. One tip-off is lack of <strong>cohesion</strong>, which is the
degree to which the elements of a single logical entity, in this case a class, are related.
Two methods are related if they access the same subset of instance or class variables or if
one calls the other. The <em>LCOM</em> metric, for <em>Lack of Cohesion Of Methods</em>, measures cohesion for
a class: in particular, it warns you if the class consists of multiple “clusters” in which
methods within a cluster are related, but methods in one cluster aren’t strongly related to
methods in other clusters. Figure 11.7 shows two of the most commonly used variants of the
LCOM metric.</p>
<p>The <em>Data Clumps</em> design smell is one warning sign that a good class is evolving toward the
“multiple responsibilities” antipattern. A Data Clump is a group of variables or values that
are always passed together as arguments to a method or returned together as a set of results
from a method. This “traveling together” is a sign that the values might really need their
own class. Another symptom is that something that used to be a “simple” data value acquires
new behaviors. For example, suppose a <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code> has attributes <code class="code docutils literal notranslate"><span class="pre">phone_number</span></code> and <code class="code docutils literal notranslate"><span class="pre">zipcode</span></code>, and
you want to add the ability to check the zip code for accuracy or canonicalize the formatting
of the phone number. If you add these methods to <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code>, they will reduce its cohesion
because they form a “clique” of methods that only deal with specific instance variables. The
alternative is to use the <em>Extract Class</em> refactoring to put these methods into a new <code class="code docutils literal notranslate"><span class="pre">Address</span></code>
class, as Figure 11.8 shows.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">Moviegoer</span>
<span class="linenos"> 2</span>    <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:street</span><span class="p">,</span> <span class="ss">:phone_number</span><span class="p">,</span> <span class="ss">:zipcode</span>
<span class="linenos"> 3</span>    <span class="n">validates</span> <span class="ss">:phone_number</span><span class="p">,</span> <span class="c1"># ...</span>
<span class="linenos"> 4</span>    <span class="n">validates</span> <span class="ss">:zipcode</span><span class="p">,</span> <span class="c1"># ...</span>
<span class="linenos"> 5</span>    <span class="k">def</span> <span class="nf">format_phone_number</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 6</span>    <span class="k">def</span> <span class="nf">verify_zipcode</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos"> 7</span>    <span class="k">def</span> <span class="nf">format_address</span><span class="p">(</span><span class="n">street</span><span class="p">,</span> <span class="n">phone_number</span><span class="p">,</span> <span class="n">zipcode</span><span class="p">)</span> <span class="c1"># data clump</span>
<span class="linenos"> 8</span>        <span class="c1"># do formatting, calling format_phone_number and verify_zipcode</span>
<span class="linenos"> 9</span>    <span class="k">end</span>
<span class="linenos">10</span><span class="k">end</span>
<span class="linenos">11</span><span class="c1"># After applying Extract Class:</span>
<span class="linenos">12</span><span class="k">class</span> <span class="nc">Moviegoer</span>
<span class="linenos">13</span>    <span class="kp">attr_accessor</span> <span class="ss">:name</span>
<span class="linenos">14</span>    <span class="n">has_one</span> <span class="ss">:address</span>
<span class="linenos">15</span><span class="k">end</span>
<span class="linenos">16</span><span class="k">class</span> <span class="nc">Address</span>
<span class="linenos">17</span>    <span class="n">belongs_to</span> <span class="ss">:moviegoer</span>
<span class="linenos">18</span>    <span class="kp">attr_accessor</span> <span class="ss">:phone_number</span><span class="p">,</span> <span class="ss">:zipcode</span>
<span class="linenos">19</span>    <span class="n">validates</span> <span class="ss">:phone_number</span><span class="p">,</span> <span class="c1"># ...</span>
<span class="linenos">20</span>    <span class="n">validates</span> <span class="ss">:zipcode</span><span class="p">,</span> <span class="c1"># ...</span>
<span class="linenos">21</span>    <span class="k">def</span> <span class="nf">format_address</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span> <span class="c1"># no arguments - operates on &#39;self&#39;</span>
<span class="linenos">22</span>    <span class="kp">private</span>  <span class="c1"># no need to expose these now:</span>
<span class="linenos">23</span>    <span class="k">def</span> <span class="nf">format_phone_number</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">24</span>    <span class="k">def</span> <span class="nf">verify_zipcode</span> <span class="p">;</span> <span class="o">...</span> <span class="p">;</span> <span class="k">end</span>
<span class="linenos">25</span><span class="k">end</span>
</pre></div>
</div>

<figure>
  <figcaption>
  Figure 11.8: To perform Extract Class, we identify the group of methods that shares a responsibility distinct from that of
the rest of the class, move those methods into a new class, make the “traveling together” data items on which they operate
into instance variables of the class, and arrange to pass an instance of the class around rather than the individual items.
  </figcaption>
</figure> 

<p><strong>Self-Check 11.3.1.</strong> <em>Draw the UML class diagrams showing class architecture before and after
the refactoring in Figure 11.8.</em></p>
<blockquote>
<div><p>Figure 11.9 shows the UML diagrams.</p>

<figure>
  <%= image_tag "Chapter11/11.9.svg", class:"center", alt: "11.49" %>
  <figcaption>
  Figure 11.9: UML class diagrams before (left) and after (right) extracting the Address class from Moviegoer.
  </figcaption>
</figure> 

</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 11, section_id: 2) %>" title="previous page"><span class="section-number">11.2. </span>Just Enough UML</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 11, section_id: 4) %>" title="next page"><span class="section-number">11.4. </span>Open/Closed Principle</a>

        </div>
        
        </div>
    </div>
