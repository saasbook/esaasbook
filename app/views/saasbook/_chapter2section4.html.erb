    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="ruby-idioms-poetry-mode-blocks-duck-typing">
<h1><span class="section-number">2.4. </span>Ruby Idioms: Poetry Mode, Blocks, Duck Typing<a class="headerlink" href="#ruby-idioms-poetry-mode-blocks-duck-typing" title="Permalink to this headline">¶</a></h1>
<p>A <strong>programming idiom</strong> is a way of doing or expressing something that occurs frequently in code
written by experienced users of a given programming language. While there may be other ways to
accomplish the same task, the idiomatic way is the one that is most readily intention-revealing
to other experienced users of the language. Your goal when learning a new language should be to
learn to “think in” that language by understanding and using its idioms well, or in other words,
to avoid the well-known pitfall that “you can write FORTRAN in any language”. In this section we
explore three key Ruby idioms: passing arguments to methods (“poetry mode” and named parameters),
blocks, and duck typing.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="n">link_to</span><span class="p">(</span><span class="s1">&#39;Edit&#39;</span><span class="p">,</span> <span class="p">{</span><span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s1">&#39;students&#39;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;edit&#39;</span><span class="p">})</span>
<span class="n">link_to</span> <span class="s1">&#39;Edit&#39;</span><span class="p">,</span>  <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s1">&#39;students&#39;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;edit&#39;</span>
<span class="n">link_to</span> <span class="s1">&#39;Edit&#39;</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="s1">&#39;students&#39;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="s1">&#39;edit&#39;</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 2.7: Three legal and equivalent calls to the method link_to (which we’ll meet in Section 4.4) that takes one string
argument and one hash argument. The first is fully parenthesized, the second omits the parentheses around the call
arguments and the curly braces around the final hash argument, and the third uses 
    </figcaption>
</figure>

<p><strong>Poetry mode and named parameters.</strong> Figures 2.7 and 2.8 show two pervasive idioms related to Ruby
method calls. The first, <em>poetry mode</em>, allows omitting parentheses around the arguments to a method
call when the parsing is unambiguous. In addition, when the last argument to a method call is a
hash, the curly braces around the hash literal can be omitted.</p>
<p>In early versions of Ruby, hash arguments were often used to emulate the <strong>named parameter</strong> feature
(also called <em>keyword</em> <em>arguments</em>) available in languages such as Python, C#, and others. For example,
the documentation for the <code class="code docutils literal notranslate"><span class="pre">link_to</span></code> method used in Figure 2.7 tells us that <code class="code docutils literal notranslate"><span class="pre">:controller</span></code> and <code class="code docutils literal notranslate"><span class="pre">:action</span></code> are
just two of many possible additional (and optional) values that can be passed to the method. True named
parameters became available in Ruby 2.0, as Figure 2.8 shows; nonetheless, a great deal of Ruby code written
prior to Ruby 2.0 still uses hashes to pass optional arguments or provide default values for arguments.</p>
<p><strong>Blocks.</strong> Ruby uses the term <em>block</em> somewhat differently than other languages do. In Ruby, a block is just a
method without a name, or an <strong>anonymous lambda expression</strong> in programming-language terminology. Like a regular
named method, it has arguments and can use local variables.</p>
<p>As Figure 2.9 shows, one of the most common uses of blocks is to implement data structure traversal. The instance method
<code class="code docutils literal notranslate"><span class="pre">each</span></code>, available in all Ruby classes that are collection-like, takes a single argument consisting of a block (anonymous lambda)
to which each member of the collection will be passed. <code class="code docutils literal notranslate"><span class="pre">each</span></code> is an example of an <strong>internal iterator</strong>. Rubyists like to say
that Ruby collections “manage their own traversal,” because it’s up to the receiver
of <code class="code docutils literal notranslate"><span class="pre">each</span></code> to decide how to implement that method to yield each collection element. (Indeed, in Figure 2.9, we can’t even tell what
the underlying type of <code class="code docutils literal notranslate"><span class="pre">movie_list</span></code> is.)</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># Using &#39;named keyword&#39; arguments</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="ss">last_name</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">greeting</span><span class="p">:</span> <span class="s2">&quot;Hi&quot;</span><span class="p">)</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">!&quot;</span>
<span class="k">end</span>
<span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">)</span>               <span class="c1"># =&gt; &quot;Hi, Dave! &quot;</span>
<span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span> <span class="ss">last_name</span><span class="p">:</span> <span class="s2">&quot;Fox&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Hi, Dave Fox!&quot;</span>
<span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span> <span class="ss">greeting</span><span class="p">:</span> <span class="s2">&quot;Yo&quot;</span><span class="p">)</span>   <span class="c1"># =&gt; &quot;Yo, Dave!&quot;</span>
<span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span> <span class="ss">greeting</span><span class="p">:</span> <span class="s2">&quot;Hey&quot;</span><span class="p">,</span> <span class="ss">last_name</span><span class="p">:</span> <span class="s2">&quot;Patterson&quot;</span><span class="p">)</span>
        <span class="c1"># =&gt; &quot;Hey, Dave Patterson!&quot; - order of keyword args irrelevant</span>
<span class="n">greet</span><span class="p">(</span><span class="ss">greeting</span><span class="p">:</span> <span class="s2">&quot;Yo&quot;</span><span class="p">)</span>              <span class="c1"># ArgumentError, since first arg is required</span>
</pre></div>
</div>
<figure>
    <figcaption>
    Figure 2.8: The use of keyword arguments or named parameters allows you to define methods in which some arguments
    are optional or assume default values. Named parameters can improve clarity for methods that take multiple arguments,
    though we will see in Chapter 9 that one should usually minimize the number of arguments a method accepts.
    </figcaption>
</figure>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">print_movies</span><span class="p">(</span><span class="n">movie_list</span><span class="p">)</span>
    <span class="n">movie_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">m</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> (rated: </span><span class="si">#{</span><span class="n">m</span><span class="o">.</span><span class="n">rating</span><span class="si">}</span><span class="s2">)&quot;</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>
<figure>
    <figcaption>
    Figure 2.9: each takes one argument—a block—and passes each element of the collection to the block in turn. A block is
    bracketed by do and end, and any arguments expected by the block are enclosed in |pipe symbols| after the do. Each time
    through the block, m is set to the next element of movie_list.
    </figcaption>
</figure>
<p>Figure 2.10 shows a simple example of such a collection operator, which can be used with any collection that
implements <code class="code docutils literal notranslate"><span class="pre">each</span></code> as a way of traversing itself. Note once again that we have no idea how the collection is
implemented: all we need to know is that it implements the instance method <code class="code docutils literal notranslate"><span class="pre">each</span></code> to enumerate its elements.
Ruby provides a wide variety of such collection methods; Figure 2.11 lists some of the most useful. With some
practice, you will automatically start to express operations on collections in terms of these functional idioms
rather than in terms of imperative loops. Although Ruby allows <code class="code docutils literal notranslate"><span class="pre">for</span> <span class="pre">i</span> <span class="pre">in</span> <span class="pre">collection</span></code>, <code class="code docutils literal notranslate"><span class="pre">each</span></code> allows us to take better
advantage of <strong>duck typing</strong>, which we’ll see shortly, to improve code reuse.</p>
<p><strong>Duck Typing.</strong> You may be surprised to learn, though, that the collection methods summarized in Figure 2.11 (and several
others not in the figure) aren’t part of Ruby’s <code class="code docutils literal notranslate"><span class="pre">Array</span></code> class. In fact, they aren’t even part of any superclass from which
Array and other collection types inherit. Instead, they take advantage of an even more powerful reuse mechanism: A <strong>mix-in</strong>
is a named collection of related methods that can be added to any class fulfilling some “contract” with the mixed-in methods.
A <em>module</em> is Ruby’s method for packaging together a group of methods as a mix-in. The Ruby statement include <code class="code docutils literal notranslate"><span class="pre">ModuleName</span></code> inside
a class definition mixes the instance methods, class methods, and variables of the module into that class. The collection methods
in Figure 2.11 are defined in a module called <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code> that is part of Ruby’s standard library and is mixed in to all of Ruby’s
collection classes. As its documentation states, <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code> requires the class mixing it in to provide an <code class="code docutils literal notranslate"><span class="pre">each</span></code> method, since
<code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code>’s collection methods are implemented in terms of <code class="code docutils literal notranslate"><span class="pre">each</span></code>. It doesn’t matter what class you mix it into as long as that
class defines the <code class="code docutils literal notranslate"><span class="pre">each</span></code> instance method, and neither the class nor the mix-in have to declare their intentions in advance. For
example, the <code class="code docutils literal notranslate"><span class="pre">each</span></code>
method in Ruby’s <code class="code docutils literal notranslate"><span class="pre">Array</span></code> class iterates over the array elements, whereas the <code class="code docutils literal notranslate"><span class="pre">each</span></code> method in the <code class="code docutils literal notranslate"><span class="pre">IO</span></code> class iterates over the lines of a
file or other I/O stream. Mix-ins thereby allow reusing whole collections of behaviors across classes that are otherwise unrelated.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># find largest element in a collection</span>
<span class="k">def</span> <span class="nf">maximum</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">first</span>
    <span class="n">collection</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">item</span> <span class="k">if</span> <span class="n">item</span> <span class="o">&gt;</span> <span class="n">result</span>
    <span class="k">end</span>
    <span class="n">result</span>
<span class="k">end</span>
<span class="n">maximum</span><span class="p">(</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>     <span class="c1"># =&gt; 4</span>
<span class="n">maximum</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="o">]</span><span class="p">)</span> <span class="c1"># =&gt; &quot;x&quot;</span>
<span class="n">max</span><span class="p">(</span><span class="o">[</span><span class="no">RomanNumeral</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;XL&#39;</span><span class="p">),</span> <span class="no">RomanNumeral</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;LI&#39;</span><span class="p">)</span><span class="o">]</span> <span class="c1"># =&gt; &#39;LI&#39;</span>

<span class="k">class</span> <span class="nc">RomanNumeral</span>
    <span class="kp">include</span> <span class="no">Comparable</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">roman_numeral_string</span><span class="p">)</span>
        <span class="vi">@orig_string</span> <span class="o">=</span> <span class="n">roman_numeral_string</span>
        <span class="vi">@value</span> <span class="o">=</span> <span class="no">RomanNumeral</span><span class="o">.</span><span class="n">convert_from_roman</span><span class="p">(</span><span class="n">roman_numeral_string</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">&lt;=&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
        <span class="vi">@value</span> <span class="o">&lt;=&gt;</span> <span class="n">other</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">to_s</span>
        <span class="vi">@orig_string</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">convert_from_roman</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
        <span class="c1"># ...code to convert Roman numerals from strings...</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>
<figure>
    <figcaption>
    Figure 2.10: This example finds the maximum-valued element in any collection that responds to each, and is agnostic to
the type(s) of the element(s) in the collection as long as they respond to >. It even works on Roman numerals if we have a
RomanNumeral class that either defines > explicitly, or defines <=> and mixes in the Comparable module to define <, >, and
so on.
    </figcaption>
</figure>
<p>Similarly, a class that defines the “spaceship operator” <code class="code docutils literal notranslate"><span class="pre">&lt;=&gt;</span></code>, which returns −1,0,1 depending on whether its second argument
is less than, equal to, or greater than its first argument, can mix in the <code class="code docutils literal notranslate"><span class="pre">Comparable</span></code> module, which defines <code class="code docutils literal notranslate"><span class="pre">&lt;,</span> <span class="pre">&lt;=,</span> <span class="pre">&gt;,</span> <span class="pre">&gt;=,</span> <span class="pre">==,</span></code>
and <code class="code docutils literal notranslate"><span class="pre">between?</span></code> in terms of <code class="code docutils literal notranslate"><span class="pre">&lt;=&gt;</span></code>. For example, the <code class="code docutils literal notranslate"><span class="pre">Time</span></code> class defines <code class="code docutils literal notranslate"><span class="pre">&lt;=&gt;</span></code> and mixes in <code class="code docutils literal notranslate"><span class="pre">Comparable</span></code>, allowing you
to write <code class="code docutils literal notranslate"><span class="pre">Time.now.between?(Time.parse(&quot;19:00&quot;),</span> <span class="pre">Time.parse(&quot;23:15&quot;))</span></code>.</p>
<p>The term “duck typing” is a popular description of this capability, because “if something looks like a duck and quacks like a duck, it might
as well be a duck.” From <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code>’s point of view, if a class has an <code class="code docutils literal notranslate"><span class="pre">each</span></code> method, it might as well be a collection, thus allowing <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code>
to provide other methods implemented in terms of <code class="code docutils literal notranslate"><span class="pre">each</span></code>. When Ruby programmers say that some class “quacks like an <code class="code docutils literal notranslate"><span class="pre">Array</span></code>,” they usually mean that
it’s not necessarily an <code class="code docutils literal notranslate"><span class="pre">Array</span></code> nor a descendant of <code class="code docutils literal notranslate"><span class="pre">Array</span></code>, but it responds to most of the same methods as <code class="code docutils literal notranslate"><span class="pre">Array</span></code> and can therefore be used wherever
an <code class="code docutils literal notranslate"><span class="pre">Array</span></code> would be used.</p>

<figure>
    <%= image_tag "Chapter2/2.11.jpg", class:"center", alt: "2.11" %>
    <figcaption>
    Figure 2.11: Some common Ruby methods on collections. For those that expect a block, the “Block” column shows the
number of arguments expected by the block; if blank, the method doesn’t expect a block. For example, a call to sort, whose
block expects 2 arguments, might look like: c.sort { |a,b| a <=> b }. These methods all return a new object rather
than modifying the receiver, but some methods also have a destructive variant ending in !, for example sort!, that modify
the receiver in place as well as returning the modified value. Use destructive methods with extreme care, if at all.
    </figcaption>
</figure>

<p><strong>Self-Check 2.4.1.</strong> <em>Write one line of Ruby that checks whether a string s is a palindrome, that is, it reads the same backwards as forwards.</em> <strong>Hint:</strong>
<em>Use the methods in Figure 2.11, and don’t forget that upper vs. lowercase shouldn’t matter: ReDivider is a palindrome.</em></p>
<blockquote>
<div><p><code class="code docutils literal notranslate"><span class="pre">s.downcase</span> <span class="pre">==</span> <span class="pre">s.downcase.reverse</span></code></p>
</div></blockquote>
<p>You might think you could say <code class="code docutils literal notranslate"><span class="pre">s.reverse=~Regexp.new(s)</span></code>, but that would fail if s happens to contain regexp metacharacters such as $.</p>
<p><strong>Self-Check 2.4.2.</strong> <em>Suppose you mix</em> <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code> <em>into a class</em> <code class="code docutils literal notranslate"><span class="pre">Foo</span></code> <em>that does not provide the</em> <code class="code docutils literal notranslate"><span class="pre">each</span></code> <em>method. What error will be</em>
<em>raised when you call</em> <code class="code docutils literal notranslate"><span class="pre">Foo.new.map</span> <span class="pre">{</span> <span class="pre">|elt|</span> <span class="pre">puts</span> <span class="pre">elt</span> <span class="pre">}</span></code> <em>?</em></p>
<blockquote>
<div><p>The map method in <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code> will attempt to call each on its receiver, but since the new <code class="code docutils literal notranslate"><span class="pre">Foo</span></code> object doesn’t define each, Ruby will raise an Undefined Method error.</p>
</div></blockquote>
<p><strong>Self-Check 2.4.3.</strong> <em>Which statement is correct and why: (a) include ’enumerable’ (b) include</em> <code class="code docutils literal notranslate"><span class="pre">Enumerable</span></code></p>
<blockquote>
<div><p><strong>(b)</strong> is correct, since include expects the name of a module, which (like a class name) is a constant rather than a string.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 2, section_id: 3) %>" title="previous page"><span class="section-number">2.3. </span>Introducing Ruby,an Object-Oriented Language</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 2, section_id: 5) %>" title="next page"><span class="section-number">2.5. </span>CHIPS: Ruby Intro</a>

        </div>
        
        </div>
    </div>
