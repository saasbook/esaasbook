    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="rails-models-databases-and-active-record">
<h1><span class="section-number">4.2. </span>Rails Models: Databases and Active Record<a class="headerlink" href="#rails-models-databases-and-active-record" title="Permalink to this headline">¶</a></h1>
<p>Every nontrivial application needs to store and manipulate persistent data. For many
SaaS applications, the two key requirements may be expressed as follows:</p>
<ol class="arabic simple">
<li><p>The app must be able to store different types of data items, or <em>entities</em>, in which all instances of a particular type of entity share a common set of <em>attributes</em>. For example, in RottenPotatoes, the attributes for a movie entity might include title, release date, MPAA rating, and so on. All movies have the same attributes, though the attribute <em>values</em> are different for each movie.</p></li>
<li><p>The app must be able to express relationships among different kinds of entities. Returning to RottenPotatoes, two other entities might be movie reviews and moviegoers. A movie has many reviews and a moviegoer has many reviews, though any single review is associated with exactly one movie and one moviegoer.</p></li>
</ol>

<figure>
    <%= image_tag "Chapter4/4.2.jpg", class:"center", alt: "4.2" %>
    <figcaption>
    Figure 4.2: A possible RDBMS table for storing movie information. The id column gives each row’s primary key—a
permanent and unique identifier that is never reused, even if that row is deleted. Most databases can be configured to assign
primary keys automatically in various ways; Rails uses the very common convention of assigning integers in increasing
order as new rows are created.
    </figcaption>
</figure>

<p>The above two requirements are so common in business that <em>Relational database management systems</em> (RDBMSs)
evolved in the early 1970s as elegant structured-storage systems whose design was based on a formalism for
representing such structure and relationships. An RDBMS stores a collection of <em>tables</em>, each of which stores
entities with a common set of <em>attributes</em>. One row in the table corresponds to one entity, and the columns
in that row correspond to the attribute values for that entity. The movies table for RottenPotatoes would
include columns for <code class="code docutils literal notranslate"><span class="pre">title,</span> <span class="pre">rating,</span> <span class="pre">release_date,</span></code> and <code class="code docutils literal notranslate"><span class="pre">description,</span></code> and the rows of the table look like Figure 4.2.</p>
<p>In Rails, data takes the form of a set of resources stored in a relational database. Amazingly, you don’t need to know much
about how RDBMSs work to get started with Rails, though understanding their basic operation becomes more important as
your apps begin to comprise multiple types of resources with relationships among them.</p>
<p>Therefore, the key questions to address in order to understand the role of the database in the Rails
model–view–controller architecture are as follows:</p>
<ol class="arabic simple">
<li><p>What is the correspondence between how an instance of a resource (say, the information about a specific movie) is stored in the database and how it is represented in the programming language used by the framework (in this case, Ruby)?</p></li>
<li><p>What software mechanisms mediate between those two representations, and what programming abstractions do those mechanisms expose?</p></li>
</ol>
<p>In our case, the answer is that Rails implements the <strong>Active Record architectural pattern</strong>. In this pattern, a Rails model is a
class backed by a specific table of an RDBMS. An instance of the class (for example, the entry for a single movie) corresponds
to a single row in that table. The model has built-in behaviors that directly operate on the database:</p>
<ul class="simple">
<li><p>Create a new row in the table (representing a new object),</p></li>
<li><p>Read an existing row into a single object instance,</p></li>
<li><p>Update an existing row with new attribute values from a modified object instance,</p></li>
<li><p>Delete a row (destroying the object’s data forever).</p></li>
</ul>
<p>This collection of four commands is often abbreviated <strong>CRUD</strong>. The combination of table name and id uniquely identifies a
model stored in the database, and as we will see, is therefore how objects are usually referenced in RESTful routes
in Rails apps.</p>
<p>Unlike some other SaaS frameworks in which the abstraction exposed to the developer is the connection to the database itself,
Active Record gives each model the knowledge of how to create, read, update, and delete instances of itself in the database
(CRUD). That is, all of the logic for “talking to” the database, and (critically) for how to marshal and unmarshal
(serialize or deserialize) attributes, is implicitly included in each model. Rails accomplishes this by providing a
class <code class="code docutils literal notranslate"><span class="pre">ActiveRecord::Base</span></code> from which your models will inherit. In OOP terms, Create and Read are class methods, since
they define actions on the <em>collection</em> of model instances as a whole, whereas Update and Delete are instance methods,
since they define actions on a specific model instance.</p>
<p>Remarkably, as Figure 4.3 shows, simply defining a class that descends from Rails’ ActiveRecord base class provides all
the necessary machinery to “connect” the model to the database. Specifically:</p>
<ul class="simple">
<li><p>The directory <code class="code docutils literal notranslate"><span class="pre">app/models</span></code> is expected to contain one Ruby code file per model. The file name is determined by converting the model’s name to <code class="code docutils literal notranslate"><span class="pre">lower_snake_case</span></code>, so a file <code class="code docutils literal notranslate"><span class="pre">app/models/movie.rb</span></code> is expected to define the class Movie.</p></li>
<li><p>The database table name is determined by converting the model’s class name to <code class="code docutils literal notranslate"><span class="pre">lower_snake_case</span></code> <em>and</em> pluralizing it. For example, instances of model <code class="code docutils literal notranslate"><span class="pre">AccountCode</span></code> would be stored in table <code class="code docutils literal notranslate"><span class="pre">account_codes</span></code>.</p></li>
<li><p>Theattributesofthemodel,andtheirtypes(string,integer,date,andsoon),areinferred from the names and types of the table’s columns.</p></li>
<li><p>The model automatically has class (static) methods <code class="code docutils literal notranslate"><span class="pre">new</span></code> and <code class="code docutils literal notranslate"><span class="pre">create</span></code>, among others, that expect a hash of arguments whose keys match those attribute names and whose values supply the attribute values for a movie instance to be created in memory (<code class="code docutils literal notranslate"><span class="pre">new</span></code>) or immediately persisted in the database (<code class="code docutils literal notranslate"><span class="pre">create</span></code>).</p></li>
</ul>
<p>In fact, just about the only thing this class definition <em>doesn’t</em> do is create the actual table in the database; we must do
that ourselves, by first telling Rails how to actually connect to the database, and then providing instructions for creating
the necessary model table(s) in our schema. When a new Rails app is created from a scratch, the automatically-generated file
<code class="code docutils literal notranslate"><span class="pre">config/database.yml</span></code> specifies how to connect to the database. By default, Rails apps are initially configured to use SQLite,
a lightweight single-user RDBMS, but later will see how to modify this file to connect to “industrial strength” database
servers such as Postgres or MySQL. To create the actual table, we create and apply a <em>migration</em>—a Ruby script describing
a set of changes to make to the database schema.</p>
<p>Why use migrations rather than directly issuing SQL statements such as <code class="code docutils literal notranslate"><span class="pre">create</span> <span class="pre">table</span></code>? There are many reasons, but as we will see, Rails
defines three <em>environments</em> in which your app can run: development (when you’re coding), production (the live app containing
real customer data), and test (used only when running automated tests). Each environment gets its own completely separate
database, but of course, the schemata of all three databases need to be kept in sync. It is much less error-prone to write
a single migration script and run it against each environment than to ensure you issue the exact same set of SQL commands
three times.</p>
<p>To create and apply a migration, you first give the command <code class="code docutils literal notranslate"><span class="pre">rails</span> <span class="pre">generate</span> <span class="pre">migration</span></code> <em>name</em>, where <em>name</em> is some descriptive
name for what the migration does; in this example, we might say <code class="code docutils literal notranslate"><span class="pre">rails</span> <span class="pre">generate</span> <span class="pre">migration</span> <span class="pre">create_movies_table</span></code>. Rails will
create a Ruby file whose name consists of your migration’s name plus a times- tamp. The file defines a migration class with
your specified name that descends from <code class="code docutils literal notranslate"><span class="pre">ActiveRecord::Migration</span></code> and has an empty change instance method. You fill in that
method with the desired schema changes, save the file, and then run the command
<code class="code docutils literal notranslate"><span class="pre">rake</span> <span class="pre">db:migrate</span></code>, which invokes the Rails utility tool rake to run the task <code class="code docutils literal notranslate"><span class="pre">db:migrate</span></code>. (<code class="code docutils literal notranslate"><span class="pre">rake</span> <span class="pre">-T</span></code> shows a list of available
tasks with brief descriptions.)</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Movie</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">CreateMovies</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
    <span class="k">def</span> <span class="nf">change</span>
        <span class="n">create_table</span> <span class="s1">&#39;movies&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
        <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="s1">&#39;title&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="s1">&#39;rating&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="s1">&#39;description&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s1">&#39;release_date&#39;</span>
        <span class="c1"># Add fields that let Rails automatically keep track</span>
        <span class="c1"># of when movies are added or modified:</span>
        <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># Seed the RottenPotatoes DB with some movies.</span>
<span class="n">more_movies</span> <span class="o">=</span> <span class="o">[</span>
    <span class="p">{</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Aladdin&#39;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s1">&#39;G&#39;</span><span class="p">,</span>
        <span class="ss">:release_date</span> <span class="o">=&gt;</span> <span class="s1">&#39;25-Nov-1992&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;When Harry Met Sally&#39;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s1">&#39;R&#39;</span><span class="p">,</span>
        <span class="ss">:release_date</span> <span class="o">=&gt;</span> <span class="s1">&#39;21-Jul-1989&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;The Help&#39;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s1">&#39;PG-13&#39;</span><span class="p">,</span>
        <span class="ss">:release_date</span> <span class="o">=&gt;</span> <span class="s1">&#39;10-Aug-2011&#39;</span><span class="p">},</span>
    <span class="p">{</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Raiders of the Lost Ark&#39;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s1">&#39;PG&#39;</span><span class="p">,</span>
        <span class="ss">:release_date</span> <span class="o">=&gt;</span> <span class="s1">&#39;12-Jun-1981&#39;</span><span class="p">}</span>
    <span class="o">]</span>

<span class="n">more_movies</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">movie</span><span class="o">|</span>
    <span class="no">Movie</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">movie</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 4.3: Top: A minimal valid ActiveRecord class. Middle: A migration makes changes to the database schema, in this
case to create the table that the model expects to find. Bottom: the create class method creates a movie instance in the
database from a hash whose keys are the table’s column names.
    </figcaption>
</figure>

<p>Notice that you don’t have to specify the filename of which migration to apply: Rails tracks which migrations
have been applied to which environments’ databases. The <code class="code docutils literal notranslate"><span class="pre">db:migrate</span></code> task examines the <strong>environment variable</strong>
<code class="code docutils literal notranslate"><span class="pre">RAILS_ENV</span></code> to determine which environment to apply the migration in, defaulting to <code class="code docutils literal notranslate"><span class="pre">development</span></code> if not set,
and then applies <em>all</em> pending migrations not yet applied to that database. Running <code class="code docutils literal notranslate"><span class="pre">rake</span> <span class="pre">db:migrate</span></code> multiple times is
harmless, since migrations already applied will simply be ignored on subsequent runs.</p>
<p>The next CHIPS exercise gives you some hands-on practice with how the Rails implementation of Active Record actually works.</p>
<p><strong>Self-Check 4.2.1.</strong> <em>What do you think would happen if you tried to run the code in the top and bottom parts of
Figure 4.3 without having created and run the migration in the middle part of the figure?</em></p>
<blockquote>
<div><p>An error would occur upon the first call to any method in the <code class="code docutils literal notranslate"><span class="pre">Movie</span></code> class that requires accessing the database,
since it would be unable to find any table named <code class="code docutils literal notranslate"><span class="pre">movies</span></code>.</p>
</div></blockquote>
</div>

<figure>
    <%= image_tag "Chapter4/4.4.jpg", class:"center", alt: "4.4" %>
    <figcaption>
    Figure 4.4: The set of RESTful routes generated by the single line resources ’movies’ in a Rails app’s routes.rb file.
You can display a table like this by running the command rake routes in the root directory of your app.
    </figcaption>
</figure>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 4, section_id: 1) %>" title="previous page"><span class="section-number">4.1. </span>The Model–View–Controller (MVC) Architecture</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 4, section_id: 3) %>" title="next page"><span class="section-number">4.3. </span>CHIPS: ActiveRecord Basics</a>

        </div>
        
        </div>
    </div>
