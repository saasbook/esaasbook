    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="forms">
<h1><span class="section-number">4.6. </span>Forms<a class="headerlink" href="#forms" title="Permalink to this headline">¶</a></h1>
<p>So far we’ve looked at views that display data to the user, but not views that collect data
<em>from</em> the user. The simplest mechanism for doing so consist of HTML forms. To create them, we
address the following steps:
1. How do we display a fill-in form to the user?
2. How is the information filled in by the user made available to the controller action, so that it can be used in a <code class="code docutils literal notranslate"><span class="pre">create</span></code> or <code class="code docutils literal notranslate"><span class="pre">update</span></code> ActiveRecord call?</p>
<p>The first step is straightforward: As Section 4.4 described, Rails by default defines a <code class="code docutils literal notranslate"><span class="pre">new</span></code> action (and route) for this purpose.
Following the pattern seen so far and illustrated in Figure 4.4:</p>
<ul class="simple">
<li><p>The route <code class="code docutils literal notranslate"><span class="pre">GET</span> <span class="pre">/movies/new</span></code> names the action, and the route helper <code class="code docutils literal notranslate"><span class="pre">new_movie_path</span></code> will generate the URI portion of the route;</p></li>
<li><p>The action will be handled by the method <code class="code docutils literal notranslate"><span class="pre">MoviesController#new</span></code>;</p></li>
<li><p>By default, the controller action will end by rendering a view <code class="code docutils literal notranslate"><span class="pre">app/views/movies/new.html.erb</span></code>.</p></li>
</ul>
<p>It seems logical to assume that that view should contain an HTML form that submits to the <code class="code docutils literal notranslate"><span class="pre">create</span></code> RESTful route. When that HTML form is submitted,
a controller action will need to parse the form data and do something with it—in our case, use it to populate the attributes of a new <code class="code docutils literal notranslate"><span class="pre">Movie</span></code> object.
To do so, the controller action must have knowledge about how the HTML form fields are named, so that it can extract data from each field and use
that data to populate attributes of an instance of the <code class="code docutils literal notranslate"><span class="pre">Movie</span></code> model. Such a scenario — a form whose fields represent attributes of an ActiveRecord
model object—is so common that Rails streamlines the process by using form tag helper methods. These helpers are Ruby methods that generate HTML
form tags whose names follow particular conventions that make them easy to parse by the controller action. Figure 4.7 shows an example; watch Screencast
4.6.1 for a description of what’s going on in it.</p>
<p>Specifically, the form_tag helper takes two arguments. The first is the URI to which the form should submit; in this case, the RESTful route helper
(Figure 4.4) is used to generate that URI. The second argument is a hash of optional arguments, one of which may be the HTTP method that should be used
to submit the form. POST is the default so we didn’t need to specify it here; GET is acceptable if submitting the form doesn’t change any application data.
If you specify <code class="code docutils literal notranslate"><span class="pre">PUT</span></code>, <code class="code docutils literal notranslate"><span class="pre">PATCH</span></code>, or <code class="code docutils literal notranslate"><span class="pre">DELETE</span></code>, as Section 4.4 described, the browser will still use POST to submit the form but Rails will “automagically” make it
appear that the form was submitted using the method you specified.</p>
<p>Not all input field types are supported by the form tag helpers (in this case, the date fields aren’t supported), and in some cases you need to generate forms whose
fields don’t necessarily correspond to the attributes of some ActiveRecord object. The Rails guide on form tag helpers and Rails API documentation describe the various
form tag helper options in detail.</p>
<p>Note that just as with the RESTful route helpers (Figure 4.4), you are not <em>required</em> to use form tag helpers, but as we’ll see next, given the common flow of submitting
a form related to a model and using the form’s information to create or update a model instance, using them actually saves you work and results in less code in your views.</p>
<p>To recap where we are, we created the new controller method that will render a view giving the user a form to fill in, placed that view in <code class="code docutils literal notranslate"><span class="pre">new.html.erb</span></code>, and arranged to
have the form submitted to the <code class="code docutils literal notranslate"><span class="pre">create</span></code> controller method. All that remains is to have the create controller action parse the form information and use it to create a new
movie in the database.</p>
<p>Recall from the examples in Section 4.2 that the <code class="code docutils literal notranslate"><span class="pre">Movie.create!</span></code> call takes a hash of attribute names and values to create a new object. The reason to use form tag helpers now
becomes clear: if you look at the HTML page generated by the <code class="code docutils literal notranslate"><span class="pre">new.html.erb</span></code> template, you’ll see that the form field names created by the form tag helpers have names of the
form <code class="code docutils literal notranslate"><span class="pre">params[’movie’][’title’]</span></code>, <code class="code docutils literal notranslate"><span class="pre">params[’movie’][’rating’]</span></code>, and so on. As a result, the value of <code class="code docutils literal notranslate"><span class="pre">params[’movie’]</span></code> is <em>a hash of movie attribute names and values</em>, which we can pass
along directly using <code class="code docutils literal notranslate"><span class="pre">Movie.create!(params[’movie’])</span></code>.</p>
<p>It is worth reading the above paragraph again: the form tag helpers give names to the form fields that result in <code class="code docutils literal notranslate"><span class="pre">params[’movie’]</span></code> containing exactly what needs to be passed to
ActiveRecord’s <code class="code docutils literal notranslate"><span class="pre">create</span></code> or <code class="code docutils literal notranslate"><span class="pre">update_attributes</span></code> methods. This streamlining is not only a great example of convention over configuration, but also an example of how a framework can
simplify the “mechanical work” of making the models, views, and controllers in a SaaS app work smoothly together.</p>
<p>We must, however, attend to an important detail before our controller action will work. “Mass assignment” of a whole set of attributes, as occurs when we pass the hash <code class="code docutils literal notranslate"><span class="pre">params[’movie’]</span></code> to
an ActiveRecord call, is a mechanism that could be used by a malicious attacker to set model attributes that shouldn’t be changeable by regular users. As Figure 4.8 shows, Rails requires
us to declare in the controller which elements of <code class="code docutils literal notranslate"><span class="pre">params</span></code> are <em>required</em> to be present (if any) for a given action, and critically, which elements are <em>permitted</em> to be assigned to model
attributes. This mechanism follows the <strong>principle of least privilege</strong> in computer security, a topic to which we return in Section 12.9 when discussing how to defend customer data.</p>
<p>The screencast shows how mass-assignment works in practice, and also shows the helpful technique of using debug breakpoints to provide a detailed look “under the hood” during
execution of a controller action.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">MoviesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">create</span>
        <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:movie</span><span class="p">)</span>
        <span class="n">params</span><span class="o">[</span><span class="ss">:movie</span><span class="o">].</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span><span class="ss">:rating</span><span class="p">,</span><span class="ss">:release_date</span><span class="p">)</span>
        <span class="c1"># shortcut: params.require(:movie).permit(:title,:rating,:release_date)</span>
        <span class="c1"># rest of code...</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 4.8: Rails’ “strong parameters” mechanism requires us to declare which values from params are required to be
    present and which values are permitted to be used to update the model. require and permit operate on the params hash
    or any of its sub-hashes, as the Rails documentation8
    explains. In Section 5.1 we introduce before-filters, which can be used
    to DRY out this code rather than repeating it in any controller action that might try to create or modify a model instance.
    </figcaption>
</figure>

<p>At this point, the controller action has used <code class="code docutils literal notranslate"><span class="pre">params[’movies’]</span></code> to create a new movie record, ostensibly successfully. But what should we display when the <code class="code docutils literal notranslate"><span class="pre">create</span></code> action completes?
Strict convention over configuration suggests a view <code class="code docutils literal notranslate"><span class="pre">app/views/movies/create.html.erb</span></code> that simply confirms the movie was created, and provides a link or other mechanism to go back
to the list of movies, but it seems clumsy to have a separate view just to do that. One alternative would be to streamline the user experience by just sending the user back to the
newly-updated list of all movies (Index action), but arrange to display a confir- mation message displayed somewhere on the page that the movie was added successfully.</p>
<p>Since we already have an action and view to handle Index, the DRY way to proceed is to have the controller action issue an <strong>HTTP redirect</strong>, telling the Web browser to start an
entirely new request for the Index action. But this approach presents a small problem. Since HTTP is stateless, when this new Index request is routed by Rails to our controller’s
<code class="code docutils literal notranslate"><span class="pre">index</span></code> action, all of the variables associated with the prior <code class="code docutils literal notranslate"><span class="pre">create</span></code> request are gone. That is a problem if we want to display a friendly message at the top of the movie list,
since at the moment of the index call, we no longer know the name or ID of the previously-created movie.</p>
<p>To address this common scenario, the <code class="code docutils literal notranslate"><span class="pre">flash[]</span></code> is a special object available in a controller that quacks like a hash, but whose contents persist from the current request to the next.
In other words, if we put something into <code class="code docutils literal notranslate"><span class="pre">flash[]</span></code> during the current controller action, we can access it during the <em>very next</em> action, but not during any subsequent actions. The entire
hash is persisted, but by convention, <code class="code docutils literal notranslate"><span class="pre">flash[:notice]</span></code> is used for informational messages and <code class="code docutils literal notranslate"><span class="pre">flash[:alert]</span></code> is used for messages about things going wrong. Using the flash in conjunction
with a redirect is so common that the Rails <code class="code docutils literal notranslate"><span class="pre">redirect_to</span></code> method provides a special syntax for it, as Figure 4.9 shows. In fact, the flash is just a special case of the more general
<code class="code docutils literal notranslate"><span class="pre">session[]</span></code>, whose contents persist “forever” across requests from the same browser (until you clear it out manually).</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">MoviesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="c1"># &#39;index&#39; and &#39;show&#39; methods from Section 4.4 omitted for clarity</span>
    <span class="k">def</span> <span class="nf">new</span>
        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">new</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">create</span>
        <span class="k">if</span> <span class="p">(</span><span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">movie_params</span><span class="p">))</span>
        <span class="n">redirect_to</span> <span class="n">movies_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@movie</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> created.&quot;</span>
        <span class="k">else</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Movie </span><span class="si">#{</span><span class="vi">@movie</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> could not be created: &quot;</span> <span class="o">+</span>
            <span class="vi">@movie</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
        <span class="n">render</span> <span class="s1">&#39;new&#39;</span>
        <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">edit</span>
        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">update</span>
        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span>
        <span class="k">if</span> <span class="p">(</span><span class="vi">@movie</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">movie_params</span><span class="p">))</span>
        <span class="n">redirect_to</span> <span class="n">movie_path</span><span class="p">(</span><span class="vi">@movie</span><span class="p">),</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@movie</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> updated.&quot;</span>
        <span class="k">else</span>
        <span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@movie</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> could not be updated: &quot;</span> <span class="o">+</span>
            <span class="vi">@movie</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
        <span class="n">render</span> <span class="s1">&#39;edit&#39;</span>
        <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">destroy</span>
        <span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
        <span class="vi">@movie</span><span class="o">.</span><span class="n">destroy</span>
        <span class="n">redirect_to</span> <span class="n">movies_path</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@movie</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="s2"> deleted.&quot;</span>
    <span class="k">end</span>
    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">movie_params</span>
        <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:movie</span><span class="p">)</span>
        <span class="n">params</span><span class="o">[</span><span class="ss">:movie</span><span class="o">].</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span><span class="ss">:rating</span><span class="p">,</span><span class="ss">:release_date</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 4.9: Putting together the main ideas of this section, here is a simple controller that handles the CRUD actions for the
Movie model. The create and update actions make use of the fact that Rails form helpers arrange to populate
params[’movies’] with a hash of attribute values ready to pass to ActiveRecord, but the private movie_params method
tells Rails which params are required and which are “safe” to pass along to ActiveRecord.
    </figcaption>
</figure>

<p>But which view(s) should attempt to display the contents of the flash? In this example,
we chose to redirect the user to the movies listing, so perhaps we should add code to the Index view to display the message.
But in the future we might decide to redirect the user someplace else instead, and in any case, the idea of displaying a confirmation
message or warning message is so common that it makes sense to factor it out rather than putting it into one specific view.</p>
<p>Recall that <code class="code docutils literal notranslate"><span class="pre">app/views/layouts/application.html.erb</span></code> is the template used to “wrap” all views by default. This is a good candidate for
displaying flash messages since any pending messages will be displayed no matter what view is rendered, as lines 11–15 of Figure 4.6 show.</p>
<p><strong>Self-Check 4.6.1.</strong> <em>Why does the form for creating a new movie submit to the</em> <code class="code docutils literal notranslate"><span class="pre">create</span></code> <em>method rather than
the new method?</em></p>
<blockquote>
<div><p>As we saw in Chapter 3, creating a new record requires two interactions. The first one, <code class="code docutils literal notranslate"><span class="pre">new</span></code>, loads the form. The second one,
<code class="code docutils literal notranslate"><span class="pre">create</span></code>, submits the form and causes the actual creation of the new record.</p>
</div></blockquote>
<p><strong>Self-Check 4.6.2.</strong> <em>Why must every controller action either render a view or perform
a redirect?</em></p>
<blockquote>
<div><p>HTTP is a request-reply protocol, so every action must generate a reply. One kind of reply is a view (Web page) but another kind is a redirect,
which instructs the browser to issue a new request to a different URI.</p>
</div></blockquote>
<p><strong>Self-Check 4.6.3.</strong> <em>Why does it make no sense to have both a render and a redirect (or two renders, or two redirects) along the
same code path in a controller action?</em></p>
<blockquote>
<div><p>Each request needs exactly one reply. Render and redirect are two different ways to reply
to a request.</p>
</div></blockquote>
<p><strong>Self-Check 4.6.4.</strong> <em>In line 3 of Figure 4.7, what would be the effect of changing</em> <code class="code docutils literal notranslate"><span class="pre">:method=&gt;:post</span></code> <em>to</em> <code class="code docutils literal notranslate"><span class="pre">:method=&gt;:get</span></code> <em>and why?</em></p>
<blockquote>
<div><p>The form submission would result in listing all movies rather than creating a new movie. The reason is that a route requires both a URI and a method:
The <code class="code docutils literal notranslate"><span class="pre">movies_path</span></code> helper with the <code class="code docutils literal notranslate"><span class="pre">GET</span></code> method would route to the <code class="code docutils literal notranslate"><span class="pre">index</span></code> action, whereas the <code class="code docutils literal notranslate"><span class="pre">movies_path</span></code> helper with the <code class="code docutils literal notranslate"><span class="pre">POST</span></code> method routes to the <code class="code docutils literal notranslate"><span class="pre">create</span></code> action.</p>
</div></blockquote>
<p><strong>Self-Check 4.6.5.</strong> <em>Given that submitting the form shown in Figure 4.7 will create a new movie, why is the view called</em> <code class="code docutils literal notranslate"><span class="pre">new.html.erb</span></code> <em>rather than</em> <code class="code docutils literal notranslate"><span class="pre">create.html.erb</span></code> <em>?</em></p>
<p>A RESTful route and its view should name the resource being requested. In this case, the resource requested when the user <em>loads</em> this form is the form itself, that is,
the ability to create a new movie; hence <code class="code docutils literal notranslate"><span class="pre">new</span></code> is an appropriate name for this resource. The resource requested when the user <em>submits</em> the form, named by the route specified
for form submission on line 3 of the figure, is the actual creation of the new movie.</p>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 4, section_id: 5) %>" title="previous page"><span class="section-number">4.5. </span>CHIPS: Rails Routes</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 4, section_id: 7) %>" title="next page"><span class="section-number">4.7. </span>CHIPS: Hangperson on Rails</a>

        </div>
        
        </div>
    </div>
