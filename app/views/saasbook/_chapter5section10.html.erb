    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="concluding-remarks-languages-productivity-and-beauty">
<h1><span class="section-number">5.10. </span>Concluding Remarks: Languages, Productivity, and Beauty<a class="headerlink" href="#concluding-remarks-languages-productivity-and-beauty" title="Permalink to this headline">¶</a></h1>
<p>This chapter showed two examples of using language features to support the productive creation of beautiful
and concise code. The first is the use of metaprogramming, closures and higher-order functions to allow model
validations and controller filters to be DRYly declared in a single place, yet called from multiple points
in the code. Validations and filters are an example of <strong>aspect-oriented programming</strong> (AOP), a methodology that
has been criticized because it obfuscates control flow but whose well-circumscribed use can enhance DRYness.
All in all, validations, filters, and association helper methods are worth studying as successful examples of
tastefully exploiting programming language features to enhance code beauty and productivity.</p>
<p>The second example is the design choices reflected in the association helper methods. For example, you may have
noticed that while the foreign key field for a Movie object associated with a review is called <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>, the
association helper methods allow us to reference <code class="code docutils literal notranslate"><span class="pre">review.movie</span></code>, allowing our code to focus on the <em>architectural</em>
association between Movies
and Reviews rather than the <em>implementation detail</em> of the foreign key names. You could certainly manipulate the <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code> or
<code class="code docutils literal notranslate"><span class="pre">review_id</span></code> fields in the database directly, as Web applications based on less-powerful frameworks are often forced to do,
or do so in your Rails app, as in <code class="code docutils literal notranslate"><span class="pre">review.movie_id=some_movie.id</span></code>. But besides being harder to read, this code hardwires
the assumption that the foreign key field is named <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>, which may not be true if your models are using advanced Rails
features such as polymorphic associations, or if ActiveRecord has been configured to interoperate with a legacy database
that follows a differ- ent naming convention. In such cases, <code class="code docutils literal notranslate"><span class="pre">review.movie</span></code> and <code class="code docutils literal notranslate"><span class="pre">review.movie=</span></code> will still work, but referring
to <code class="code docutils literal notranslate"><span class="pre">review.movie_id</span></code> will fail. Since someday your code will be legacy code, help your successors be productive—keep the
logical structure of your entities as separate as possible from the database representation.</p>
<p>We might similarly ask, now that we know how associations are stored in the RDBMS, why <code class="code docutils literal notranslate"><span class="pre">movie.save</span></code> actually also causes a
change to the <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> table when we save a movie after adding a review to it. In fact, calling <code class="code docutils literal notranslate"><span class="pre">save</span></code> on the new review object
would also work, but having said that a Movie has many Reviews, it just makes more sense to think of saving the Movie when
we update which Reviews it has. In other words, it’s designed this way in order to make sense to programmers and make the
code more beautiful.</p>
<p>Finally, as we saw in Section 5.8, an application framework provides direct support for the major architectural components
of the application (in our case, models, views, and con- trollers), but any large software system contains many other kinds
of code as well. Indeed, some of the examples of that section are best understood as additional patterns for solving software
problems—a theme to which we will frequently return, and that we treat in depth in Chapter 11.</p>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 5, section_id: 9) %>" title="previous page"><span class="section-number">5.9. </span>Fallacies and Pitfalls</a>
    <a class='right-next' id="next-link" href="<%= chapter_path(chapter_id: 6) %>" title="next page"><span class="section-number">6. </span>Mobile and Desktop SaaS Clients: JavaScript Introduction</a>

        </div>
        
        </div>
    </div>
