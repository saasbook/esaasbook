    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="single-sign-on-and-third-party-authentication">
<h1><span class="section-number">5.2. </span>Single Sign-On and Third-Party Authentication<a class="headerlink" href="#single-sign-on-and-third-party-authentication" title="Permalink to this headline">¶</a></h1>
<p>One way to be more DRY and productive is to avoid implementing functionality that
you can instead reuse from other services. One example of this today is <strong>authentication</strong>—the
process by which an entity or <strong>principal</strong> proves that it is who it claims to be. In SaaS,
end users and servers are two common types of principals that may need to authenticate
themselves. Typically, a user proves their identity by supplying a username and password
that (presumably) nobody else knows, and a server proves its identity with a <strong>server certificate</strong>
(discussed in Chapter 12) whose <strong>integrity</strong> can be verified using cryptography.</p>
<p>In the early days of SaaS, users had to establish separate usernames and passwords for each site.
Today, an increasingly common scenario is <strong>single sign-on</strong> (SSO), in which the credentials established
for one site (the <em>provider</em>) can be used to sign in to other sites that are administratively unrelated
to it. Clearly, SSO is central to the usefulness of service-oriented architecture: It would be difficult
for services to work together on your behalf if each had its own separate authentication scheme. Given
the prevalence and increasing importance of SSO, our view is that new SaaS apps should use it rather
than “rolling their own” authentication.</p>
<p>However, SSO presents the dilemma that while you may be happy to use your credentials on site A to login to
site B, you usually don’t want to reveal those credentials to site B. (Imagine that site A is your financial
institution and site B is a foreign company from whom you want to buy something.) Figure 5.6 shows how <em>third-party
authentication</em> solves this problem using RottenPotatoes and Twitter as an example. First, the app requesting
authentication (RottenPotatoes) creates a request to an authentication provider on which the user already
has an account, in this case Twitter. The request often includes information about what privileges the app wants
on the provider, for example, to be able to tweet as this user or learn who the user’s followers are.</p>
<p>A typical SSO process is illustrated by the OAuth2 protocol, which begins with a link or button the user must
click. That link takes the user to a login page served securely <em>by the provider</em>. The user is then given the
chance to login to the provider and decide what privileges to grant the requesting app. Critically, this interaction
takes place entirely between the user and the provider: the requesting app has no access to any part of this interaction.</p>
<div class="highlight-shell notranslate"><div class="highlight"><pre><span></span><span class="hll">rails generate model Moviegoer name:string provider:string uid:string
</span></pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># Edit app/models/moviegoer.rb to look like this:</span>
<span class="k">class</span> <span class="nc">Moviegoer</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_with_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
        <span class="no">Moviegoer</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span>
        <span class="ss">:provider</span> <span class="o">=&gt;</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;provider&quot;</span><span class="o">]</span><span class="p">,</span>
        <span class="ss">:uid</span> <span class="o">=&gt;</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;uid&quot;</span><span class="o">]</span><span class="p">,</span>
        <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;info&quot;</span><span class="o">][</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 5.7: Top (a): Type this command in a terminal to create a moviegoers model and migration, and run rake
db:migrate to apply the migration. Bottom (b): Then edit the generated app/models/moviegoer.rb file to match this
code, which the text explains.
    </figcaption>
</figure>

<p>Once authentication succeeds, the provider generates an HTTP <code class="code docutils literal notranslate"><span class="pre">POST</span></code> to a particular route on the requesting app.
This post request contains an <strong>access token</strong>—a string created using cryptographic techniques that can be passed back
to the provider later, allowing the provider to verify that the token could only have been created as the result
of a successful login process. At this point, the requesting app is able to do two things:</p>
<ol class="arabic simple">
<li><p>Itcanbelievethattheuserhasprovenheridentitytotheprovider,andoptionallyrecord the provider’s persistent user-ID (uid) for that user, usually provided as part of the access token. For example, Armando Fox’s uid on Twitter happens to be 318094297, though this information isn’t useful unless accompanied by an access token granting the right to obtain information about that uid.</p></li>
<li><p>It can use the token to request further information about the user from the provider, depending on what specific privileges were granted along with successful authentication. For example, a token from Facebook might indicate that the user gave permission for the app to learn who his friends are, but denied permission for the app to post on his Facebook wall.</p></li>
</ol>
<p>Happily, adding third-party authentication to Rails apps is straightforward. Of course, before we can enable a user to
log in, we need to be able to represent users! So before continuing, create a basic model and migration following the
instructions in Figure 5.7. There are three aspects to managing third-party authentication in SaaS:</p>
<ol class="arabic simple">
<li><p>How to authenticate the user via a third party authentication provider (“auth provider”) such as Google or GitHub</p></li>
<li><p>How to remember that the user has logged in successfully</p></li>
<li><p>How to link the user’s ID in our own app with that provider’s ID, so that we can recognize this user in the future</p></li>
</ol>
<p>By far the simplest way to accomplish the first task in Rails is Rails. The first is how to actually authenticate the
user via a third party. We will use the excellent OmniAuth9 gem, which provides a uniform API to many different SSO
providers, abstracting away the entire process in Figure 5.6. No matter which provider is used, OmniAuth arranges to
send the
user to the provider’s login page, handle the providers’ callbacks for successful or failed authentication, and
generating <code class="code docutils literal notranslate"><span class="pre">GET</span></code> requests to well-known routes in your app to handle these cases. To use OmniAuth, you install both
the OmniAuth gem and the necessary additional gems for each auth provider <em>strategy</em>.</p>
<p>Figure 5.8 shows the changes necessary to your routes, controllers, and views to use Om- niAuth. Most auth providers
require you to register any apps that will use their site for authentication, so in this example you would need to
create a Twitter developer account, which will assign you an API key and an API secret that you specify in
<code class="code docutils literal notranslate"><span class="pre">config/initializers/omniauth.rb</span></code> (Figure 5.8, bottom). The second aspect of handling authentication is keeping track
of whether the current user has been authenticated. You may have already guessed that this information can be stored
in the <code class="code docutils literal notranslate"><span class="pre">session[]</span></code>. However, we should keep session management separate from the other concerns of the app, since the
session may not be relevant if our app is used in a service-oriented architecture setting. To that end, Figure 5.8(b)
shows how we can “create” a session when a user successfully authenticates (lines 3–9) and “destroy” it when they log
out (lines 11–15). The “scare quotes” are there because the only thing actually being created or destroyed is the value
of <code class="code docutils literal notranslate"><span class="pre">session[:user_id]</span></code>, which is set to the primary key of the logged-in user during the session and nil at other times.
Figure 5.8(c) shows how this check is abstracted by a <code class="code docutils literal notranslate"><span class="pre">before_filter</span></code> in <code class="code docutils literal notranslate"><span class="pre">ApplicationController</span></code> (which will be inherited
by all controllers) that sets <code class="code docutils literal notranslate"><span class="pre">&#64;current_user</span></code> accordingly, so that controller methods or views can just look at <code class="code docutils literal notranslate"><span class="pre">&#64;current_user</span></code>
without being coupled to the details of how the user was authenticated.</p>
<p>The third aspect is linking our own representation of a user’s identity—that is, her primary key in the <code class="code docutils literal notranslate"><span class="pre">moviegoers</span> <span class="pre">`</span>
<span class="pre">table—with</span> <span class="pre">the</span> <span class="pre">auth</span> <span class="pre">provider’s</span> <span class="pre">representation,</span> <span class="pre">such</span> <span class="pre">as</span> <span class="pre">the</span> <span class="pre">:code:`uid</span></code> in the case of Twitter. Since we may want to expand
which auth providers our customers can use in the future, the migration in Figure 5.7(a) that creates the <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code>
model specifies both a uid field and a provider field. What happens the very first time Alice logs into RottenPotatoes
with her Twitter ID? The query in line 6 of the sessions controller (Figure 5.8(b)) will return <code class="code docutils literal notranslate"><span class="pre">nil</span></code>, so
<code class="code docutils literal notranslate"><span class="pre">Moviegoer.create_with_omniauth</span></code> (Figure 5.7(b), lines 5–10) will be called to create a new record for this user.
Note that “Alice as authenticated by Twitter” would therefore be a different user from our point of view than
“Alice as authenticated by Facebook,” because we have no way of knowing that those represent the same person.
That’s why some sites that support multiple third-party auth providers give users a way to “link” two accounts
to indicate that they identify the same person.</p>
<p>This may seem like a lot of moving parts, but compared to accomplishing the same task without an abstraction such as
OmniAuth, this is very clean code: we added fewer than two dozen lines, and by incorporating more OmniAuth strategies,
we could support additional third-party auth providers with essentially no new work. Screencast 5.2.1 shows the user
experience associated with this code.</p>
<p>However, we must be careful to avoid creating a security vulnerability. What if a malicious attacker crafts a form
submission that tries to modify <code class="code docutils literal notranslate"><span class="pre">params[:moviegoer][:uid]</span></code> or <code class="code docutils literal notranslate"><span class="pre">params[:moviegoer][:provider]</span></code>—fields that should only be
modified by the authentication logic—by posting <strong>hidden form fields</strong> named <code class="code docutils literal notranslate"><span class="pre">params[moviegoer][uid]</span></code> and
so on? Section 4.4 explained how the “strong parameters” feature of Rails can be used to block assignment of model
attributes that regular users shouldn’t be able to set. While it’s fine for the <code class="code docutils literal notranslate"><span class="pre">create_with_omniauth</span></code> method to create
a user with the appropriate <code class="code docutils literal notranslate"><span class="pre">uid</span></code>, a regular moviegoer should not be able to set their own uid since it would allow them
to impersonate being logged in! To ensure this can’t happen, we must make sure <code class="code docutils literal notranslate"><span class="pre">uid</span></code> does not appear in any <code class="code docutils literal notranslate"><span class="pre">params.permit</span></code>
or <code class="code docutils literal notranslate"><span class="pre">params.require</span></code> in the Moviegoers controller.</p>
<p><strong>Self-Check 5.2.1.</strong> <em>Briefly describe how RottenPotatoes could let you log in with your Twitter ID without you having
to reveal your Twitter password to RottenPotatoes.</em></p>
<blockquote>
<div><p>RottenPotatoes redirects you to a page hosted by Twitter where you log in as usual. The redirect includes a URL to which
Twitter posts back a message confirming that you’ve au- thenticated yourself and specifying what actions RottenPotatoes
may take on your behalf as a Twitter user.</p>
</div></blockquote>
<p><strong>Self-Check 5.2.2.</strong> <em>True or false: If you log in to RottenPotatoes using your Twitter ID, RottenPotatoes becomes capable
of tweeting using your Twitter ID.</em></p>
<blockquote>
<div><p>False: authentication is separate from permissions. Most third-party authentication providers, including Twitter,
allow the requesting app to ask for permission to do specific things, and leave it up to the user to decide
whether to allow it.</p>
</div></blockquote>

<figure>
    <%= image_tag "Chapter5/5.9.jpg", class:"center", alt: "5.9" %>
    <figcaption>
    Figure 5.9: Each end of an association is labeled with its cardinality, or the number of entities participating in that “side” of
the association, with an asterisk meaning “zero or more”. In the figure, each Review belongs to a single Moviegoer and a
single Movie, and a Review without a Moviegoer or without a Movie is not allowed. (A cardinality notation of “0..1” rather
than “1” would allow “orphaned” reviews.
    </figcaption>
</figure>

</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 5, section_id: 1) %>" title="previous page"><span class="section-number">5.1. </span>DRYing Out MVC: Partials, Validations and Filters</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 5, section_id: 3) %>" title="next page"><span class="section-number">5.3. </span>CHIPS: Rails Intro</a>

        </div>
        
        </div>
    </div>
