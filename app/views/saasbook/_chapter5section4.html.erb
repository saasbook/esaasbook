    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="associations-and-foreign-keys">
<h1><span class="section-number">5.4. </span>Associations and Foreign Keys<a class="headerlink" href="#associations-and-foreign-keys" title="Permalink to this headline">¶</a></h1>
<p>An <em>association</em> is a logical relationship between two types of entities in a software architecture.
For example, the previous CHIPS added a <code class="code docutils literal notranslate"><span class="pre">Moviegoer</span></code> class to RottenPotatoes; we could now add a <code class="code docutils literal notranslate"><span class="pre">Review</span></code>
class to allow a moviegoer to write reviews of their favorite movies. Because each review is about
exactly one movie, but a single movie can have many reviews, we say that there is a one-to-many association
from reviews to movies. Similarly, there is a one-to-many association from moviegoers to reviews. Figure 5.9
shows these associations us- ing one type of <strong>Unified Modeling Language (UML)</strong> diagram. We will see more examples
of UML in Chapter 11.</p>
<p>In Rails parlance, Figure 5.9 shows that:</p>
<ul class="simple">
<li><p>A Moviegoer has many Reviews</p></li>
<li><p>A Movie has many Reviews</p></li>
<li><p>A Review belongs to one Moviegoer and to one Movie</p></li>
</ul>
<p>In Rails, the “permanent home” for our model objects is the database, so we need a way to represent associations
for objects stored there. Fortunately, associations are so common that relational databases provide a special mechanism
to support them: <strong>foreign keys</strong>. A foreign key is a column in one table whose job is to reference the primary key of
another table to establish an association between the objects represented by those tables. Recall that by default,
Rails migrations create tables whose primary key column is called <code class="code docutils literal notranslate"><span class="pre">id</span></code>. Figure 5.10 shows a Moviegoers table to keep
track of different users and a Reviews table with foreign key columns <code class="code docutils literal notranslate"><span class="pre">moviegoer_id</span></code> and <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>, allowing each review
to refer to the primary keys (ids) of the user who authored it and the movie it’s about.</p>

<figure>
    <%= image_tag "Chapter5/5.10.jpg", class:"center", alt: "5.10" %>
    <figcaption>
    Figure 5.10: In this figure, Alice has given 5 potatoes to Star Wars and 4 potatoes to Inception, Bob has given 3 potatoes to
Inception, Carol hasn’t provided any reviews, and no one has reviewed It’s Complicated. For brevity and clarity, the other
fields of the movies and reviews tables are not shown.
    </figcaption>
</figure>

<p>For example, to find all reviews for Star Wars, we would first form the <strong>Cartesian product</strong> of all the rows of the
<code class="code docutils literal notranslate"><span class="pre">movies</span></code> and <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> tables by concatenating each row of the
<code class="code docutils literal notranslate"><span class="pre">movies</span></code> table with each possible row of the <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> table. This would give us a new table with 9 rows (since there
are 3 movies and 3 reviews) and 7 columns (3 from the <code class="code docutils literal notranslate"><span class="pre">movies</span></code> table and 4 from the <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> table). From this large
table, we then select only those rows for which the <code class="code docutils literal notranslate"><span class="pre">id</span></code> from the <code class="code docutils literal notranslate"><span class="pre">movies</span></code> table equals the <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code> from the <code class="code docutils literal notranslate"><span class="pre">reviews</span></code>
table, that is, only those movie-review pairs in which the review is about that movie. Finally, we select only those
rows for which the movie <code class="code docutils literal notranslate"><span class="pre">id</span></code> (and therefore the review’s <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>) are equal to 41, the primary key ID for <em>Star Wars</em>.
This simple example (called a <strong>join</strong> in relational database parlance) illustrates how complex relationships can be
represented and manipulated using a small set of operations (relational algebra) on a collection of tables with uniform
data layout. In SQL, the Structured Query Language used by substantially all relational databases,
the query would look something like this:</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># it would be nice if we could do this:</span>
<span class="n">inception</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;Inception&#39;</span><span class="p">)</span>
<span class="n">alice</span><span class="p">,</span><span class="n">bob</span> <span class="o">=</span> <span class="no">Moviegoer</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">alice_id</span><span class="p">,</span> <span class="n">bob_id</span><span class="p">)</span>
<span class="c1"># alice likes Inception, bob less so</span>
<span class="n">alice_review</span> <span class="o">=</span> <span class="no">Review</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:potatoes</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">bob_review</span>   <span class="o">=</span> <span class="no">Review</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:potatoes</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># a movie has many reviews:</span>
<span class="n">inception</span><span class="o">.</span><span class="n">reviews</span> <span class="o">=</span> <span class="o">[</span><span class="n">alice_review</span><span class="p">,</span> <span class="n">bob_review</span><span class="o">]</span>
<span class="c1"># a moviegoer has many reviews:</span>
<span class="n">alice</span><span class="o">.</span><span class="n">reviews</span> <span class="o">&lt;&lt;</span> <span class="n">alice_review</span>
<span class="n">bob</span><span class="o">.</span><span class="n">reviews</span> <span class="o">&lt;&lt;</span> <span class="n">bob_review</span>
<span class="c1"># can we find out who wrote each review?</span>
<span class="n">inception</span><span class="o">.</span><span class="n">reviews</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">.</span><span class="n">moviegoer</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span> <span class="c1"># =&gt; [&#39;alice&#39;,&#39;bob&#39;]</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 5.11: A straightforward implementation of associations would allow us to refer directly to associated objects, even
though they’re stored in different database tables.
    </figcaption>
</figure>

<div class="highlight-sql notranslate"><div class="highlight"><pre><span></span><span class="k">SELECT</span> <span class="n">reviews</span><span class="p">.</span><span class="o">*</span>
    <span class="k">FROM</span> <span class="n">movies</span> <span class="k">JOIN</span> <span class="n">reviews</span> <span class="k">ON</span> <span class="n">movies</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="n">reviews</span><span class="p">.</span><span class="n">movie_id</span>
    <span class="k">WHERE</span> <span class="n">movies</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">41</span><span class="p">;</span>
</pre></div>
</div>
<p>If we weren’t working with a database, though, we’d probably come up with a design in which each object of a class has
“direct references” to its associated objects, rather than constructing the query plan above. A Moviegoer object would
maintain an array of references to Reviews authored by that moviegoer; a Review object would maintain a reference to the
Moviegoer who wrote it; and so on. Such a design would allow us to write code that looks like Figure 5.11.</p>
<p>Rails’ <code class="code docutils literal notranslate"><span class="pre">ActiveRecord::Associations</span></code> module supports exactly this design, as we’ll learn by doing. Apply the code changes
in Figure 5.12 as directed in the caption, and you should then be able to start rails console and successfully execute
the examples in Fig- ure 5.11.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># Run &#39;rails generate migration create_reviews&#39; and then</span>
<span class="c1">#   edit db/migrate/*_create_reviews.rb to look like this:</span>
<span class="k">class</span> <span class="nc">CreateReviews</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
    <span class="k">def</span> <span class="nf">change</span>
        <span class="n">create_table</span> <span class="s1">&#39;reviews&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
        <span class="n">t</span><span class="o">.</span><span class="n">integer</span>    <span class="s1">&#39;potatoes&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">text</span>       <span class="s1">&#39;comments&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="s1">&#39;moviegoer&#39;</span>
        <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="s1">&#39;movie&#39;</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Review</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
    <span class="n">belongs_to</span> <span class="ss">:movie</span>
    <span class="n">belongs_to</span> <span class="ss">:moviegoer</span>
<span class="k">end</span>
</pre></div>
</div>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># place a copy of the following line anywhere inside the Movie class</span>
<span class="c1">#  AND inside the Moviegoer class (idiomatically, it should go right</span>
<span class="c1">#  after &#39;class Movie&#39; or &#39;class Moviegoer&#39;):</span>
<span class="n">has_many</span> <span class="ss">:reviews</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 5.12: Top (a): Create and apply this migration to create the Reviews table. The new model’s foreign keys are related
to the existing movies and moviegoers tables by convention over configuration. Middle (b): Put this new Review model in
app/models/review.rb. Bottom (c): Make this one-line change to each of the existing files movie.rb and moviegoer.rb.
    </figcaption>
</figure>

<p>How does this work? Since everything in Ruby is a method call, we know that Line 8 in Figure 5.11 is really
a call to the instance method <code class="code docutils literal notranslate"><span class="pre">reviews=</span></code> on a <strong>Movie</strong> object. This instance method remembers its assigned value
(an array of Alice’s and Bob’s reviews) in memory. Recall, though, that since a Review is on the “belongs to”
side of the association (Review belongs to a Movie), to associate a review with a movie we must set the <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>
field for that review. <em>We don’t actually have to modify the movies table.</em> So in this simple example, the call
to <code class="code docutils literal notranslate"><span class="pre">inception.reviews=</span></code> isn’t actually updating the movie record for <em>Inception</em> at all: it’s setting the <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code>
field of both Alice’s and Bob’s reviews to “link” them to <em>Inception</em>.</p>
<p>Figure 5.13 lists some of the most useful methods added to a <code class="code docutils literal notranslate"><span class="pre">movie</span></code> object by virtue of declaring that it <code class="code docutils literal notranslate"><span class="pre">has_many</span></code> reviews.
Of particular interest is that since <code class="code docutils literal notranslate"><span class="pre">has_many</span></code> implies a <em>collection</em> of the owned object (Reviews), the <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> method quacks
like a collection. That is, you can use all the collection idioms of Figure 2.11 on it—iterate over its elements with <code class="code docutils literal notranslate"><span class="pre">each</span></code>,
use functional idioms like <code class="code docutils literal notranslate"><span class="pre">sort</span></code>, <code class="code docutils literal notranslate"><span class="pre">map</span></code>, and so on, as in lines 8, 10 and 13 of Figure 5.11.</p>
<p>What about the <code class="code docutils literal notranslate"><span class="pre">belongs_to</span></code> method calls in <code class="code docutils literal notranslate"><span class="pre">review.rb</span></code>? As you might guess, <code class="code docutils literal notranslate"><span class="pre">belongs_to</span> <span class="pre">:movie</span></code> gives <strong>Review</strong> objects a movie
instance method that looks up and returns the movie to which this review belongs. Since a review belongs to at most one
movie, the method name is singular rather than plural, and returns a single object rather than an enumerable.</p>

<figure>
    <%= image_tag "Chapter5/5.13.jpg", class:"center", alt: "5.13" %>
    <figcaption>
    Figure 5.13: A subset of the association methods created by movie has_many :reviews and review belongs_to
:movie, assuming m is an existing Movie object and r1,r2 are Review objects. Consult the
ActiveRecord::Associations documentation13 for a full list. Method names of association methods follow convention
over configuration based on the name of the associated mode
    </figcaption>
</figure>

<p><strong>Self-Check 5.4.1.</strong> <em>In Figure 5.12(a), why did we add foreign keys (references) only to the</em> <code class="code docutils literal notranslate"><span class="pre">reviews</span></code> <em>table and not to the</em>
<code class="code docutils literal notranslate"><span class="pre">moviegoers</span></code> <em>or</em> <code class="code docutils literal notranslate"><span class="pre">movies</span></code> <em>tables?</em></p>
<blockquote>
<div><p>Since we need to associate many reviews with a single movie or moviegoer, the foreign keys must be part of the model on
the “owned” side of the association, in this case Reviews.</p>
</div></blockquote>
<p><strong>Self-Check 5.4.2.</strong> <em>In Figure 5.13, are the association accessors and setters (such as</em> <code class="code docutils literal notranslate"><span class="pre">m.reviews</span></code> <em>and</em> <code class="code docutils literal notranslate"><span class="pre">r.movie</span></code>
<em>) instance methods or class methods?</em></p>
<blockquote>
<div><p>Instance methods, since a collection of reviews is associated with a particular movie, not with movies in general.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 5, section_id: 3) %>" title="previous page"><span class="section-number">5.3. </span>CHIPS: Rails Intro</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 5, section_id: 5) %>" title="next page"><span class="section-number">5.5. </span>Through-Associations</a>

        </div>
        
        </div>
    </div>
