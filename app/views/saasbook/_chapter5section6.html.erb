    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="restful-routes-for-associations">
<h1><span class="section-number">5.6. </span>RESTful Routes for Associations<a class="headerlink" href="#restful-routes-for-associations" title="Permalink to this headline">¶</a></h1>
<p>How should we RESTfully refer to actions associated with movie reviews? In particular, at least when creating
or updating a review, we need a way to link it to a moviegoer and a movie. Presumably the moviegoer will be
the <code class="code docutils literal notranslate"><span class="pre">&#64;current_user</span></code> we set up in Section 5.2. But what about the movie?</p>
<p>Chapter 7 discusses Behavior-Driven Design, which emphasizes that development should be driven by scenarios that
describe actual user behaviors. According to this view, since it only makes sense to create a review when you have
a movie in mind, most likely the “Create Review” functionality will be accessible from a button or link on the Show
Movie Details page for a particular movie. Therefore, at the moment we display this control, we know what
movie the review is going to be associated with. The question is how to get this information to the <code class="code docutils literal notranslate"><span class="pre">new</span></code> or <code class="code docutils literal notranslate"><span class="pre">create</span></code>
method in the <code class="code docutils literal notranslate"><span class="pre">ReviewsController</span></code>.</p>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="c1"># in routes.rb, change the line &#39;resources :movies&#39; to:</span>
<span class="n">resources</span> <span class="ss">:movies</span> <span class="k">do</span>
<span class="n">resources</span> <span class="ss">:reviews</span>
<span class="k">end</span>
</pre></div>
</div>

<figure>
    <%= image_tag "Chapter5/5.17.jpg", class:"center", alt: "5.17" %>
    <figcaption>
    Figure 5.17: Specifying nested routes in routes.rb (top) also provides nested URI helpers (bottom), analogous to the
simpler ones provided for regular resources.
    </figcaption>
</figure>

<p>One method we might use is that when the user visits a movie’s Detail page, we could use the <code class="code docutils literal notranslate"><span class="pre">session[]</span></code>, which persists
across requests, to remember the ID of the movie whose details have just been rendered as the “current movie.” When
<code class="code docutils literal notranslate"><span class="pre">ReviewsController#new</span></code> is called, we’d retrieve that ID from the <code class="code docutils literal notranslate"><span class="pre">session[]</span></code> and associate it with the review by populating
a hidden form field in the review, which in turn will be available to <code class="code docutils literal notranslate"><span class="pre">ReviewsController#create</span></code>. However, this approach
isn’t RESTful, since the movie ID—a critical piece of information for creating a review—is “hidden” in the session.</p>
<p>A more RESTful alternative, which makes the movie ID explicit, is to make the RESTful routes themselves reflect the
logical “nesting” of Reviews inside Movies, as the top part of Figure 5.17 shows. Since Movie is the “owning” side of
the association, it’s the outer resource. Just as the original <code class="code docutils literal notranslate"><span class="pre">resources</span> <span class="pre">:movies</span></code> provided a set of RESTful URI helpers
for CRUD actions on movies, this <em>nested resource</em> route specification provides a set of RESTful URI helpers for CRUD
actions on <em>reviews that are owned by a movie</em>. The bottom part of Figure 5.17 summarizes the new routes, which are
provided in <em>addition</em> to the basic RESTful routes on Movies that we’ve been using all along. Note that via convention
over configuration, the URI wildcard <code class="code docutils literal notranslate"><span class="pre">:id</span></code> will match the ID of the resource itself—that is, the ID of a review—and
Rails chooses the “outer” resource name to make <code class="code docutils literal notranslate"><span class="pre">:movie_id</span></code> capture the ID of the “owning” resource. The ID values will
therefore be available in controller actions as <code class="code docutils literal notranslate"><span class="pre">params[:id]</span></code> (the review) and <code class="code docutils literal notranslate"><span class="pre">params[:movie_id]</span></code> (the movie with which
the review will be associated).</p>
<p>Figure 5.18 shows a simplified example of using such nested routes to create the views and actions associated with a new
review. Of particular note is the use of a before-filter in <code class="code docutils literal notranslate"><span class="pre">ReviewsController</span></code> to ensure that before a review is created,
two conditions are true:</p>
<ol class="arabic simple">
<li><p><code class="code docutils literal notranslate"><span class="pre">&#64;current_user</span></code> is set (that is, someone is logged in and will “own” the new review).</p></li>
<li><p>The movie captured from the route (Figure 5.17) as <code class="code docutils literal notranslate"><span class="pre">params[:movie_id]</span></code> exists in the database.</p></li>
</ol>
<div class="highlight-ruby notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="k">class</span> <span class="nc">ReviewsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
<span class="linenos"> 2</span>    <span class="n">before_filter</span> <span class="ss">:has_moviegoer_and_movie</span> <span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
<span class="linenos"> 3</span>    <span class="kp">protected</span>
<span class="linenos"> 4</span>    <span class="k">def</span> <span class="nf">has_moviegoer_and_movie</span>
<span class="linenos"> 5</span>        <span class="k">unless</span> <span class="vi">@current_user</span>
<span class="linenos"> 6</span>            <span class="n">flash</span><span class="o">[</span><span class="ss">:warning</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;You must be logged in to create a review.&#39;</span>
<span class="linenos"> 7</span>            <span class="n">redirect_to</span> <span class="n">login_path</span>
<span class="linenos"> 8</span>        <span class="k">end</span>
<span class="linenos"> 9</span>        <span class="k">unless</span> <span class="p">(</span><span class="vi">@movie</span> <span class="o">=</span> <span class="no">Movie</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:movie_id</span><span class="o">]</span><span class="p">))</span>
<span class="linenos">10</span>            <span class="n">flash</span><span class="o">[</span><span class="ss">:warning</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Review must be for an existing movie.&#39;</span>
<span class="linenos">11</span>            <span class="n">redirect_to</span> <span class="n">movies_path</span>
<span class="linenos">12</span>        <span class="k">end</span>
<span class="linenos">13</span>    <span class="k">end</span>
<span class="linenos">14</span>
<span class="linenos">15</span>    <span class="kp">public</span>
<span class="linenos">16</span>    <span class="k">def</span> <span class="nf">new</span>
<span class="linenos">17</span>        <span class="vi">@review</span> <span class="o">=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">reviews</span><span class="o">.</span><span class="n">build</span>
<span class="linenos">18</span>    <span class="k">end</span>
<span class="linenos">19</span>
<span class="linenos">20</span>    <span class="k">def</span> <span class="nf">create</span>
<span class="linenos">21</span>    <span class="c1"># since moviegoer_id is a protected attribute that won&#39;t get</span>
<span class="linenos">22</span>    <span class="c1"># assigned by the mass-assignment from params[:review], we set it</span>
<span class="linenos">23</span>    <span class="c1"># by using the &lt;&lt; method on the association. We could also</span>
<span class="linenos">24</span>    <span class="c1"># set it manually with review.moviegoer = @current_user.</span>
<span class="linenos">25</span>    <span class="vi">@current_user</span><span class="o">.</span><span class="n">reviews</span> <span class="o">&lt;&lt;</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">reviews</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:review</span><span class="o">]</span><span class="p">)</span>
<span class="linenos">26</span>    <span class="n">redirect_to</span> <span class="n">movie_path</span><span class="p">(</span><span class="vi">@movie</span><span class="p">)</span>
<span class="linenos">27</span>    <span class="k">end</span>
<span class="linenos">28</span><span class="k">end</span>
</pre></div>
</div>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;h1&gt; New Review for </span><span class="cp">&lt;%=</span> <span class="vi">@movie</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"> &lt;/h1&gt;</span>

<span class="cp">&lt;%=</span> <span class="n">form_tag</span> <span class="n">movie_reviews_path</span><span class="p">(</span><span class="vi">@movie</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form&#39;</span> <span class="k">do</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    &lt;label class=&quot;col-form-label&quot;&gt; How many potatoes:&lt;/label&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">select_tag</span> <span class="s1">&#39;review[potatoes]&#39;</span><span class="p">,</span> <span class="n">options_for_select</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">submit_tag</span> <span class="s1">&#39;Create Review&#39;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;btn btn-success&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp"></span><span class="x"></span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 5.18: Top (a): a controller that manipulates Reviews that are “owned by” both a Movie and a Moviegoer, using
before-filters to ensure the “owning” resources are properly identified in the route URI. Bottom (b): A possible view
template for creating a new review, that is, app/views/reviews/new.html.erb.
    </figcaption>
</figure>

<p>If either condition is not met, the user is redirected to an appropriate page with an error message
explaining what happened. If both conditions are met, the controller instance variables <code class="code docutils literal notranslate"><span class="pre">&#64;current_user</span></code>
and <code class="code docutils literal notranslate"><span class="pre">&#64;movie</span></code> become accessible to the controller action and view.</p>
<p>The view uses the <code class="code docutils literal notranslate"><span class="pre">&#64;movie</span></code> variable to create a submission path for the form using the <code class="code docutils literal notranslate"><span class="pre">movie_review_path</span></code> helper
(Figure 5.17 again). When that form is submitted, once again <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code> is parsed from the route and checked by
the before-filter prior to calling the <code class="code docutils literal notranslate"><span class="pre">create</span></code> action. Similarly, we could link to the page for creating a new
review by calling <code class="code docutils literal notranslate"><span class="pre">link_to</span></code> with the route helper <code class="code docutils literal notranslate"><span class="pre">new_movie_review_path(&#64;movie)</span></code> as its URI argument.</p>
<p><strong>Self-Check 5.6.1.</strong> <em>Why must we provide values for a review’s</em> <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code> <em>and</em> <code class="code docutils literal notranslate"><span class="pre">moviegoer_id</span></code> <em>to the</em>
<code class="code docutils literal notranslate"><span class="pre">new</span></code> <em>and</em> <code class="code docutils literal notranslate"><span class="pre">create</span></code> <em>actions in</em> <code class="code docutils literal notranslate"><span class="pre">ReviewsController</span></code> <em>, but not to the edit and update actions?</em></p>
<blockquote>
<div><p>Once the review is created, the stored values of its <code class="code docutils literal notranslate"><span class="pre">movie_id</span></code> and <code class="code docutils literal notranslate"><span class="pre">moviegoer_id</span></code> fields tell us
the associated movie and moviegoer.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 5, section_id: 5) %>" title="previous page"><span class="section-number">5.5. </span>Through-Associations</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 5, section_id: 7) %>" title="next page"><span class="section-number">5.7. </span>CHIPS: Associations</a>

        </div>
        
        </div>
    </div>
