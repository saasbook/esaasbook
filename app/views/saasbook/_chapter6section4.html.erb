    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="the-document-object-model-dom-and-jquery">
<h1><span class="section-number">6.4. </span>The Document Object Model (DOM) and jQuery<a class="headerlink" href="#the-document-object-model-dom-and-jquery" title="Permalink to this headline">¶</a></h1>
<p>The World Wide Web Consortium Document Object Model (W3C DOM) is “a platform-and language-neutral interface
that will allow programs and scripts to dynamically access and update the content, structure and style of
documents”—in other words, a standard representation of an HTML, XML, or XHTML document consisting of a hierarchy
of elements. A DOM element is recursively defined in that one of its properties is an array of child elements, as
Figure 6.7 shows. Hence a DOM node representing the <code class="code docutils literal notranslate"><span class="pre">&lt;html&gt;</span></code> element of an HTML page is sufficient to represent the
whole page, since every element on a well-formed page is a descendant of <code class="code docutils literal notranslate"><span class="pre">&lt;html&gt;</span></code>. Other DOM element properties
correspond to the HTML element’s
attributes (<code class="code docutils literal notranslate"><span class="pre">href</span></code>, <code class="code docutils literal notranslate"><span class="pre">src</span></code>, and so on). When a browser loads a page, the HTML of the page is parsed into a
DOM tree similar to Figure 6.7.</p>
<p>How does JavaScript get access to the DOM? When JavaScript is embedded in a browser, the global object, named by the
global variable window, defines additional browser-specific properties and functions, collectively called the JSAPI.
Whenever a new page is loaded, a new global <code class="code docutils literal notranslate"><span class="pre">window</span></code> object is created that shares no data with the global objects of
other visible pages. One of the properties of the global object is <code class="code docutils literal notranslate"><span class="pre">window.document</span></code>, which is the root element of the
current document’s DOM tree and also defines some functions to query, traverse, and modify the DOM; one of the most
common is <code class="code docutils literal notranslate"><span class="pre">getElementById</span></code>, which you may have run across while perusing others’ JavaScript code.</p>
<p>However, to avoid compatibility problems stemming from different browsers’ implementations of the JSAPI, we will bypass
these native JSAPI functions entirely in favor of jQuery’s more powerful “wrappers” around them. jQuery also adds additional
features and behaviors absent from the native JSAPIs, such as animations and better support for CSS and AJAX (Section 6.7).
jQuery defines a global function <code class="code docutils literal notranslate"><span class="pre">jQuery()</span></code> (aliased as <code class="code docutils literal notranslate"><span class="pre">$()</span></code>) that, when passed a CSS selector, returns all of the current
page’s DOM elements matching that selector. For example, <code class="code docutils literal notranslate"><span class="pre">jQuery(’#movies’)</span></code> or <code class="code docutils literal notranslate"><span class="pre">$(’#movies’)</span></code> would return the single element
whose ID is movies, if one exists on the page; <code class="code docutils literal notranslate"><span class="pre">$(’h1.title’)</span></code> would return all the <code class="code docutils literal notranslate"><span class="pre">h1</span></code> elements whose CSS class is <code class="code docutils literal notranslate"><span class="pre">title</span></code>.
A more general version of this functionality is <code class="code docutils literal notranslate"><span class="pre">.find(</span></code> <em>selector</em> <code class="code docutils literal notranslate"><span class="pre">)</span></code>, which only searches the DOM subtree rooted at the target.
To illustrate the distinction, <code class="code docutils literal notranslate"><span class="pre">$(’p</span> <span class="pre">span’)</span></code> finds any span element that is contained inside a p element, whereas if <code class="code docutils literal notranslate"><span class="pre">elt</span></code>
already refers to a <em>particular</em> <code class="code docutils literal notranslate"><span class="pre">p</span></code> element, then <code class="code docutils literal notranslate"><span class="pre">elt.find(’span’)</span></code> only finds span elements that are descendants of <code class="code docutils literal notranslate"><span class="pre">elt</span></code>.</p>
<p>Whether you use <code class="code docutils literal notranslate"><span class="pre">$()</span></code> or <code class="code docutils literal notranslate"><span class="pre">find</span></code>, the return value is a node set (collection of one or more el- ements) matching the selector,
or null if there were no matches. Each element is “wrapped” in jQuery’s DOM element representation, giving it abilities
beyond the browser’s built-in JSAPI. From now on, we will refer to such elements as “jQuery-wrapped” elements, to distinguish
them from the representation that would be returned by the browser’s native JSAPI.
In particular, you can do various things with jQuery-wrapped elements in the node set, as Figure 6.8 shows:</p>
<ul class="simple">
<li><p>To change an element’s visual appearance, define CSS classes that create the desired appearances, and use jQuery to add or remove CSS class(es) from the element at run-time.</p></li>
<li><p>To change an element’s content, use jQuery functions that set the element’s HTML or plain text content.</p></li>
<li><p>To animate an element (show/hide, fade in/out, and so on), invoke a jQuery function on that element that manipulates the DOM to achieve the desired effect.</p></li>
</ul>
<p>Note, however, that even when a node set includes multiple matching elements, it is not a JavaScript array and you cannot
treat it like one: you cannot write <code class="code docutils literal notranslate"><span class="pre">$(’tr’)[0]</span></code> to select the first row of a table, even if you first call jQuery’s <code class="code docutils literal notranslate"><span class="pre">toArray()</span></code>
function on the node set. Instead, following the Iterator design pattern, jQuery provides an <code class="code docutils literal notranslate"><span class="pre">each</span></code> iterator defined on the
collection that returns one element at a time while hiding the details of how the elements are stored in the collection,
just as <code class="code docutils literal notranslate"><span class="pre">Array#each</span></code> does in Ruby.</p>
<p>Screencast 6.4.1 shows some simple examples of these behaviors from the browser’s JavaScript console. We will use these
to implement the features of Screencast 6.1.1.</p>
<p>Finally, as we will see, the jQuery() or $() function is overloaded: its behavior depends on the number and types of
arguments with which it’s called. In this section we introduced just one of its four behaviors, namely for selecting
elements in the DOM; we will soon see the others.</p>
<p><strong>Self-Check 6.4.1.</strong> <em>Why is</em> <code class="code docutils literal notranslate"><span class="pre">this.document</span></code> <em>, when it appears outside the scope of any function,
equivalent to</em> <code class="code docutils literal notranslate"><span class="pre">window.document</span></code> <em>?</em></p>
<blockquote>
<div><p>Outside of any function, the value of this is the global object. When JavaScript runs in a Web browser,
the global object is the window object.</p>
</div></blockquote>
<p><strong>Self-Check 6.4.2.</strong> <em>True or false: even after the user closes a window in her Web browser, the JavaScript code
associated with that window can still access and traverse the HTML docu- ment the window had been displaying.</em></p>
<blockquote>
<div><p>False. Each new HTML document gets its own global object and DOM, which are destroyed when the
document’s window is closed.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 6, section_id: 3) %>" title="previous page"><span class="section-number">6.3. </span>Classes, Functions and Constructors</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 6, section_id: 5) %>" title="next page"><span class="section-number">6.5. </span>The DOM and Accessibility</a>

        </div>
        
        </div>
    </div>
