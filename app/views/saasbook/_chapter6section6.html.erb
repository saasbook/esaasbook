    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="events-and-callbacks">
<h1><span class="section-number">6.6. </span>Events and Callbacks<a class="headerlink" href="#events-and-callbacks" title="Permalink to this headline">¶</a></h1>
<p>So far all of our DOM manipulation has been by typing JavaScript commands directly. As you’ve no doubt guessed,
much more interesting behaviors are possible when DOM manipulation can be triggered by user actions. As part
of the JSAPI for the DOM, browsers allow attaching JavaScript <em>event handlers</em> to the user interface: when the user
performs a certain UI action, such as clicking a button or moving the mouse into or out of a particular HTML element,
you can designate a JavaScript function that will be called and have the opportunity to react. This capability makes
the page behave more like a desktop UI in which individ- ual elements respond visually to user interactions, and less
like a static page in which any interaction causes a whole new page to be loaded and displayed.</p>
<p>Figure 6.9 summarizes the most important events defined by the browser’s native JSAPI and improved upon by jQuery. While
some are triggered by user actions on DOM elements, others relate to the operation of the browser itself or to “pseudo-UI”
events such as form submission, which may occur via clicking a Submit button, pressing the Enter key (in some browsers),
or another JavaScript callback causing the form to be submitted. To attach a behavior to an event, simply provide a
JavaScript function that will be called when the event <em>fires</em>. We say that this function, called a <strong>callback</strong> or <em>event handler</em>,
is <em>bound</em> to that event on that DOM element. Although events are automatically triggered by the browser, you can also trigger
them yourself: for example, <code class="code docutils literal notranslate"><span class="pre">e.trigger(’click’)</span></code> triggers the <code class="code docutils literal notranslate"><span class="pre">click</span></code> event
handler for element <code class="code docutils literal notranslate"><span class="pre">e</span></code>. As we will see in Section 6.8, this ability is useful when testing: you can simulate user interaction
and check that the correct changes are applied to the DOM in response to a UI event.</p>
<p>Browsers define built-in behavior for some events and elements: for example, clicking on a link visits the linked page. If
such an element also has a programmer-supplied <code class="code docutils literal notranslate"><span class="pre">click</span></code> handler, the handler runs first; if the handler returns a truthy value
(Figure 6.2), the built-in behavior runs next, but if the handler returns a falsy value, the built-in behavior is suppressed.
What if an element has <em>no</em> handler for a user-initiated event, as is the case for images? In that case, its parent element in
the DOM tree is given the chance to respond to the event handler. For example, if you click on an <code class="code docutils literal notranslate"><span class="pre">img</span></code> element inside a <code class="code docutils literal notranslate"><span class="pre">div</span></code>
and the <code class="code docutils literal notranslate"><span class="pre">img</span></code> has no click handler, then the <code class="code docutils literal notranslate"><span class="pre">div</span></code> will receive the click event. This process continues until some element handles
the event or it “bubbles” all the way up to the top-level window, which may or may not have a built-in response depending on
the event.</p>
<p>Our discussion of events and event handlers motivates the third common use of JavaScript’s <code class="code docutils literal notranslate"><span class="pre">this</span></code> keyword (recall that Section 6
.3 introduced the first two uses). When an event is handled, in the body of the event handler function, jQuery will arrange
for <code class="code docutils literal notranslate"><span class="pre">this</span></code> to refer to the element to which the handler is attached (which may not be the element that originally received the
event, if the event “bubbled up” from a descendant). However, if you were programming <em>without</em> jQuery, the value of <code class="code docutils literal notranslate"><span class="pre">this</span></code> in an
event handler is the global object (<code class="code docutils literal notranslate"><span class="pre">document.window</span></code>), and you have to examine the event’s data structure (usually passed as
the final argument to the handler) to identify the element that handled the event. Since han- dling events is such a common
idiom, and most of the time an event handler wants to inspect or manipulate the state of the element on which the event was
triggered, jQuery is written to explicitly set this to that DOM element.</p>
<p>Putting all these pieces together, Figure 6.10 shows the client-side JavaScript to imple- ment a checkbox that, when checked,
will hide any movies with ratings other than G or PG. Our general strategy for JavaScript can be summarized as:</p>
<ol class="arabic simple">
<li><p>Identify the DOM elements we want to operate on, and make sure there is a convenient and unambiguous way of selecting them using <code class="code docutils literal notranslate"><span class="pre">$()</span></code>.</p></li>
<li><p>Create the necessary JavaScript functions to manipulate the elements as needed. For this simple example we can just write them down, but as we’ll see in Section 6.8, for AJAX or more complex functions we will use TDD (Chapter 8) to develop the code.</p></li>
<li><p>Define a setup function that binds the appropriate JavaScript functions to the elements and performs any other necessary DOM manipulation.</p></li>
<li><p>Arrange to call the setup function once the document is loaded.</p></li>
</ol>
<div class="highlight-javascript notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="kd">let</span> <span class="nx">MovieListFilter</span> <span class="o">=</span> <span class="p">{</span>
<span class="linenos"> 2</span>    <span class="nx">filter_adult</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="linenos"> 3</span>        <span class="c1">// &#39;this&#39; is *unwrapped* element that received event (checkbox)</span>
<span class="linenos"> 4</span>        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;:checked&#39;</span><span class="p">))</span> <span class="p">{</span>
<span class="linenos"> 5</span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.adult&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
<span class="linenos"> 6</span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="linenos"> 7</span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.adult&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
<span class="linenos"> 8</span>        <span class="p">};</span>
<span class="linenos"> 9</span>    <span class="p">},</span>
<span class="linenos">10</span>    <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="linenos">11</span>        <span class="c1">// construct checkbox with label</span>
<span class="linenos">12</span>        <span class="kd">let</span> <span class="nx">labelAndCheckbox</span> <span class="o">=</span>
<span class="linenos">13</span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;label for=&quot;filter&quot;&gt;Only movies suitable for children&lt;/label&gt;&#39;</span> <span class="o">+</span>
<span class="linenos">14</span>            <span class="s1">&#39;&lt;input type=&quot;checkbox&quot; id=&quot;filter&quot;/&gt;&#39;</span> <span class="p">);</span>
<span class="linenos">15</span>        <span class="nx">labelAndCheckbox</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="s1">&#39;#movies&#39;</span><span class="p">);</span>
<span class="linenos">16</span>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#filter&#39;</span><span class="p">).</span><span class="nx">change</span><span class="p">(</span><span class="nx">MovieListFilter</span><span class="p">.</span><span class="nx">filter_adult</span><span class="p">);</span>
<span class="linenos">17</span>    <span class="p">}</span>
<span class="linenos">18</span><span class="p">}</span>
<span class="linenos">19</span><span class="nx">$</span><span class="p">(</span><span class="nx">MovieListFilter</span><span class="p">.</span><span class="nx">setup</span><span class="p">);</span> <span class="c1">// run setup function when document ready</span>
</pre></div>
</div>

<figure>
    <figcaption>
    Figure 6.10: Using jQuery to add a “filter movies” checkbox to RottenPotatoes’ list of movies page; put this code in
app/assets/javascripts/movie_list_filter.js. The text walks through the example in detail, and additional figures
in the rest of the chapter generalize the techniques shown here. Our examples use jQuery’s DOM manipulation features
rather than the browser’s built-in ones because the jQuery API is more consistent across different browsers than the official
W3C DOM specification.
    </figcaption>
</figure>


<p>For Step 1, we modify our existing Rails movie list view to attach the CSS class adult
to any table rows for movies rated other than G or PG. All we have to do is change line 12
of the Index template (Figure 4.5) as follows, thereby allowing us to write <code class="code docutils literal notranslate"><span class="pre">$(’.adult’)</span></code> to
select those rows:</p>
<div class="highlight-erb notranslate"><div class="highlight"><pre><span></span><span class="x">&lt;div class=&quot;row</span><span class="cp">&lt;%=</span> <span class="p">(</span><span class="s1">&#39; adult&#39;</span> <span class="k">unless</span> <span class="n">movie</span><span class="o">.</span><span class="n">rating</span> <span class="o">=~</span> <span class="sr">/^G|PG$/</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">&quot;&gt;</span>
</pre></div>
</div>
<p>For Step 2, we provide the function <code class="code docutils literal notranslate"><span class="pre">filter_adult</span></code>, which we will arrange to be called whenever the checkbox is
checked or unchecked. As lines 4–8 of Figure 6.10 show, if the checkbox is checked, the adult movie rows are
hidden; if unchecked, they are revealed. Recall from Figure 6.8 that <code class="code docutils literal notranslate"><span class="pre">:checked</span></code> is one of jQuery’s built-in behaviors
for checking the state of an element. Remember also that jQuery selectors such as <code class="code docutils literal notranslate"><span class="pre">$(’.adult’)</span></code> generally return a
collection of matching elements, and actions like <code class="code docutils literal notranslate"><span class="pre">hide()</span></code> are applied to the whole collection.</p>
<p>Why does line 4 refer to <code class="code docutils literal notranslate"><span class="pre">$(this)</span></code> rather than just <code class="code docutils literal notranslate"><span class="pre">this</span></code>? The mechanism by which user interactions are dispatched to
JavaScript functions is part of the browser’s JSAPI, so the value of <code class="code docutils literal notranslate"><span class="pre">this</span></code> is the <em>browser’s</em> representation of the
checkbox (the element that handled the event). In order to use the more powerful jQuery features such as <code class="code docutils literal notranslate"><span class="pre">is(’:checked’)</span></code>,
we have to “wrap” the native element as a jQuery element by calling <code class="code docutils literal notranslate"><span class="pre">$</span></code> on it in order to give it these special powers.
The first row of Figure 6.12 shows this usage of <code class="code docutils literal notranslate"><span class="pre">$</span></code>.</p>
<p>For Step 3, we provide the setup function, which does two things. First, it creates a label and a checkbox (lines 12–14),
using the <code class="code docutils literal notranslate"><span class="pre">$</span></code> mechanism shown in the second row of Figure 6.12, and inserts them just before the <code class="code docutils literal notranslate"><span class="pre">movies</span></code> table (line 15).
Again, by creating a jQuery element we are able to call <code class="code docutils literal notranslate"><span class="pre">insertBefore</span></code> on it, which is not part of the browser’s built-in
JSAPI. Most jQuery functions such as <code class="code docutils literal notranslate"><span class="pre">insertBefore</span></code> return the target object itself, allowing “chaining” of function calls as we’ve seen in Ruby.</p>
<p>Second, the setup function binds the <code class="code docutils literal notranslate"><span class="pre">filter_adult</span></code> function to the checkbox’s change handler. You might have expected to
bind to the checkbox’s <code class="code docutils literal notranslate"><span class="pre">click</span></code> handler, but <code class="code docutils literal notranslate"><span class="pre">change</span></code> is more robust because it’s an example of a “pseudo-UI” event: it fires
whether the checkbox was changed by a mouse click, a keypress (for browsers that have keyboard navigation turned on, such
as for users with disabilities that prevent use of a mouse), or even by other JavaScript code. The <code class="code docutils literal notranslate"><span class="pre">submit</span></code> event on forms
is similar: it’s better to bind to that event than to bind to the <code class="code docutils literal notranslate"><span class="pre">click</span></code> handler on the form-submit button, in case the
user submits the form by hitting the Enter key.</p>
<p>Why didn’t we just add the label and checkbox to the Rails view template? The reason is our design guideline of graceful
degradation: by using JavaScript to create the checkbox, legacy browsers will not render the checkbox at all. If the checkbox
was part of the view template, users of legacy browsers would still see the checkbox, but nothing would happen when they
clicked on it.</p>
<p>Why does line 16 refer to <code class="code docutils literal notranslate"><span class="pre">MovieListFilter.filter_adult?</span></code> Couldn’t it just refer to <code class="code docutils literal notranslate"><span class="pre">filter_adult?</span></code> No, because that would imply
that <code class="code docutils literal notranslate"><span class="pre">filter_adult</span></code> is a variable name visible in the scope of the <code class="code docutils literal notranslate"><span class="pre">setup</span></code> function, but in fact it’s not a variable name at
all—it’s just a function-valued property of the object <code class="code docutils literal notranslate"><span class="pre">MovieListFilter</span></code>, which is a (global) variable. It is good JavaScript
practice to create one or a few global objects to “encapsulate” your functions as properties, rather than writing a bunch
of functions and polluting the global namespace with their names.</p>

<figure>
    <%= image_tag "Chapter6/6.11.jpg", class:"center", alt: "6.11" %>
    <figcaption>
    Figure 6.11: The three common uses of this introduced in Sections 6.3 and 6.6. See Fallacies and Pitfalls for more on the
use and misuse of this.
    </figcaption>
</figure>
<figure>
    <%= image_tag "Chapter6/6.12.jpg", class:"center", alt: "6.12" %>
    <figcaption>
    Figure 6.12: The four ways to invoke the overloaded function jQuery() or $() and the effects of each. All four are
demonstrated in Figure 6.10.
    </figcaption>
</figure>


<p>The last step is Step 4, which is to arrange for the <code class="code docutils literal notranslate"><span class="pre">setup</span></code> function to be called. For historical reasons, JavaScript
code associated with a page can begin executing <em>before</em> the entire page has been loaded and the DOM fully parsed. This
feature was more important for responsiveness when browsers and Internet connections were slower. Nonetheless, we usually
want to wait until the page is finished loading and the entire DOM has been parsed, or else we might be trying to bind
callbacks on elements that don’t exist yet! Line 19 does this, adding <code class="code docutils literal notranslate"><span class="pre">MovieListFilter.filter_adult</span></code> to the list of functions
to be executed once the page is finished loading, as the last row of Figure 6.12 shows. Since you can call <code class="code docutils literal notranslate"><span class="pre">$()</span></code> multiple
times to run multiple setup functions, you can keep each file’s setup function together with that file’s functionality,
as we’ve done here. To run this example place all the code from Figure 6.12 in <code class="code docutils literal notranslate"><span class="pre">app/assets/javascripts/movie_list_filter.js</span></code>.</p>
<p>This was a dense example, but it illustrates the basic jQuery functionality you’ll need for many UI enhancements. The figures
and tables in this section generalize the techniques introduced in the example, so it’s worth spending some time perusing
them. In particular, Figure 6.12 summarizes the four different ways to use jQuery’s <code class="code docutils literal notranslate"><span class="pre">$</span></code>, all of which we’ve now seen.</p>
<p>Finally, most of jQuery’s events are based on the built-in events recognized by browsers, but you can also define your own
custom events and use <code class="code docutils literal notranslate"><span class="pre">trigger</span></code> to trigger them, and many jQuery-based libraries do just that. For example, Bootstrap’s plugin
for showing a <strong>modal window</strong> defines a custom event <code class="code docutils literal notranslate"><span class="pre">show</span></code> that is generated when a modal window is displayed and another custom
event <code class="code docutils literal notranslate"><span class="pre">shown</span></code> that is generated when that window is dismissed. Your own code can listen for these events in order to take
actions before or after the modal is displayed. In your own code, you might enclose menus for month and day in a single
outer element such as a <code class="code docutils literal notranslate"><span class="pre">div</span></code>, and then define a custom <code class="code docutils literal notranslate"><span class="pre">update</span></code> event on the <code class="code docutils literal notranslate"><span class="pre">div</span></code> that checks that the month and day are
compatible. You could then isolate the checking code in a separate event handler for <code class="code docutils literal notranslate"><span class="pre">update</span></code>, and use <code class="code docutils literal notranslate"><span class="pre">trigger</span></code> to call it
from within the change handlers for the individual
month and day menus. This is one way that custom handlers help DRY out your JavaScript code.</p>
<p><strong>Self-Check 6.6.1.</strong> <em>Explain why calling</em> <code class="code docutils literal notranslate"><span class="pre">$(selector)</span></code> <em>is equivalent to calling</em> <code class="code docutils literal notranslate"><span class="pre">$(window.document).find(selector)</span></code>.</p>
<blockquote>
<div><p><code class="code docutils literal notranslate"><span class="pre">document</span></code> is a property of the browser’s built-in global object (<code class="code docutils literal notranslate"><span class="pre">window</span></code>) that refers to the browser’s representation of the
root of the DOM. Wrapping the document element using <code class="code docutils literal notranslate"><span class="pre">$</span></code> gives it access to jQuery functions such as <code class="code docutils literal notranslate"><span class="pre">find</span></code>, which locates all
elements matching the selector that are in the subtree of its target; in this case, the target is the DOM root, so it will
find any matching elements in the entire document.</p>
</div></blockquote>
<p><strong>Self-Check 6.6.2.</strong> <em>In Self-Check 6.6.1, why did we need to write</em> <code class="code docutils literal notranslate"><span class="pre">$(document).find</span></code> <em>rather than</em> <code class="code docutils literal notranslate"><span class="pre">document.find</span></code> <em>?</em></p>
<blockquote>
<div><p><code class="code docutils literal notranslate"><span class="pre">document</span></code>, also known as <code class="code docutils literal notranslate"><span class="pre">window.document</span></code>, is the browser’s native representation of
the document object. Since find is a jQuery function, we need to “wrap” document to give
it special jQuery powers.</p>
</div></blockquote>
<p><strong>Self-Check 6.6.3.</strong> <em>What would happen if we omitted the last line of Figure 6.10, which arranges to call the</em> <code class="code docutils literal notranslate"><span class="pre">setup</span></code> <em>function?</em></p>
<blockquote>
<div><p>The browser would behave like a legacy browser without JavaScript. The checkbox wouldn’t be drawn (since that happens in
the <code class="code docutils literal notranslate"><span class="pre">setup</span></code> function) and even if it were, nothing would happen when it was clicked, since the setup function binds our
JavaScript handler for the checkbox’s <code class="code docutils literal notranslate"><span class="pre">change</span></code> event.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 6, section_id: 5) %>" title="previous page"><span class="section-number">6.5. </span>The DOM and Accessibility</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 6, section_id: 7) %>" title="next page"><span class="section-number">6.7. </span>AJAX: Asynchronous JavaScript And XML</a>

        </div>
        
        </div>
    </div>
