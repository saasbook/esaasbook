    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="behavior-driven-design-and-user-stories">

<figure>
  <%= image_tag "Chapter7/7.1.jpg", class:"center", alt: "7.1" %>
  <figcaption>
  Figure 7.1: An iteration of the Agile software lifecycle and its relationship to the chapters in this book. This chapter
emphasizes talking to customers as part of Behavior-Driven Design.
  </figcaption>
</figure>

<h1><span class="section-number">7.1. </span>Behavior-Driven Design and User Stories<a class="headerlink" href="#behavior-driven-design-and-user-stories" title="Permalink to this headline">¶</a></h1>
<blockquote>
<div><p>Behavior-Driven Design is Test-Driven Development done correctly.</p>
<p class="attribution">—Anonymous</p>
</div></blockquote>
<p>Software projects fail because they don’t do what customers want; or because they are late; or because
they are over budget; or because they are hard to maintain and evolve; or all of the above.</p>
<p>The Agile lifecycle was invented to attack these problems for many common types of software. Figure 7.1 shows
one iteration of the Agile lifecycle from Chapter 1, highlighting the portion covered in this chapter. As we
saw in Chapter 1, the Agile lifecycle involves:</p>
<ul class="simple">
<li><p>Working closely and continuously with stakeholders to develop requirements and tests.</p></li>
<li><p>Maintaining a working prototype while deploying new features typically every two weeks—called an iteration—and checking in with stakeholders to decide what to add next and to validate that the current system is what they really want. Having a working prototype and prioritizing features reduces the chances of a project being late or over budget, or perhaps increasing the likelihood that the stakeholders are satisfied with the current system once the budget is exhausted!</p></li>
</ul>
<p>Unlike a plan-and-document lifecycle in Chapter 1, Agile development does not switch phases (and people) over time
from development mode to maintenance mode. With Agile, you are basically in maintenance mode as soon as you’ve
implemented the first set of features. This approach helps make the project easier to maintain and evolve.</p>
<p>We start the Agile lifecycle with <strong>Behavior-Driven Design (BDD)</strong>. BDD asks questions about the behavior of an application
<em>before and during development</em> so that the stakeholders are less likely to miscommunicate. Requirements are written down
as in plan-and-document, but unlike plan-and-document, requirements are continuously refined to ensure the resulting
software meets the stakeholders’ desires. That is, using the terms from Chapter 1, the goal of BDD requirements is
<strong>validation</strong> (build the right thing), not just <strong>verification</strong> (build the thing right).</p>
<p>The BDD version of requirements is <strong>user stories</strong>, which describe how the application is expected to be used. They are
lightweight versions of requirements that are better suited to Agile. User stories help stakeholders plan and prioritize
development. Thus, like plan-and-document, you start with requirements, but in BDD user stories take the place of design
documents in plan-and-document.</p>
<p>By concentrating on the behavior of the application versus the implementation of application, it is easier to reduce
misunderstandings between stakeholders. As we shall see in the next chapter, BDD is closely tied to Test-Driven
Development (TDD), which does test implementation. In practice they work together hand-in-hand, but for pedagogical
reasons we introduce them sequentially.</p>
<p>User stories came from the Human Computer Interface (HCI) community. They devel- oped them using 3-inch by 5-inch
index cards or “3-by-5 cards,” or in countries where metric paper sizes are used, A7 cards of 74 mm by 105 mm.
(We’ll see other examples of paper and pencil technology from the HCI community shortly.) These cards contain one
to three sentences written in everyday nontechnical language written jointly by the customers and de- velopers. The
rationale is that paper cards are nonthreatening and easy to rearrange, thereby enhancing brainstorming and prioritizing.
The general guidelines for the user stories them- selves is that they must be testable, be small enough to implement in
one iteration, and have business value. Section 7.2 gives more detailed guidance for good user stories.</p>
<p>Note that individual developers working by themselves without customer interaction don’t need these 3-by-5 cards, but
this “lone wolf” developer doesn’t match the Agile philosophy of working closely and continuously with the customer.</p>
<p>We will use the RottenPotatoes app from Chapters 3 and 4 as the running example in this chapter and the next one. We start
with the stakeholders, which are simple for this simple app:</p>
<ul class="simple">
<li><p>The operators of RottenPotatoes, and</p></li>
<li><p>The movie fans who are end-users of RottenPotatoes.</p></li>
</ul>
<p>We’ll introduce a new feature in Section 7.6, but to help understand all the mov- ing parts, we’ll start with a user
story for an existing feature of RottenPotatoes so that we can understand the relationship of all the components in a
simpler set- ting. The user story we picked is to add movies to the RottenPotatoes database:</p>
<div class="highlight-cucumber notranslate"><div class="highlight"><pre><span></span><span class="k">Feature:</span><span class="nf"> Add a movie to RottenPotatoes</span>
<span class="nf">    As a movie fan</span>
<span class="nf">    So that I can share a movie with other movie fans</span>
<span class="nf">    I want to add a movie to RottenPotatoes database</span>
<span class="k">Scenario:</span><span class="nf"> Add a movie</span>
<span class="k">    Given </span><span class="nf">I am on the RottenPotatoes home page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I follow &quot;</span><span class="s">Add new movie</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the Create New Movie page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I fill in &quot;</span><span class="s">Title</span><span class="nf">&quot; with &quot;</span><span class="s">Hamilton</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">PG-13</span><span class="nf">&quot; from &quot;</span><span class="s">Rating</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">July 4, 2020</span><span class="nf">&quot; as the &quot;</span><span class="s">Released On</span><span class="nf">&quot; date</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Save Changes</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the RottenPotatoes home page</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Hamilton</span><span class="nf">&quot;</span>
</pre></div>
</div>
<p>This user story format was developed by the startup company Connextra and is named
after them; sadly, this startup is no longer with us. The format is:</p>
<div class="highlight-cucumber notranslate"><div class="highlight"><pre><span></span><span class="nf">Feature name</span>
<span class="nf">    As a [kind of stakeholder],</span>
<span class="nf">    So that [I can achieve some goal],</span>
<span class="nf">    </span><span class="k">I </span><span class="nf">want to [do some task]</span>
</pre></div>
</div>
<p>This format identifies the stakeholder since different stakeholders may describe the desired behavior differently.
For example, users may want to link to information sources to make it easier to find the information while operators
may want links to trailers so that they can get an income stream from the advertisers. All three clauses have to be
present in the Connextra format, but they are not always in this order.</p>
<p><strong>Self-Check 7.1.1.</strong> <em>True or False: User stories on 3x5 cards in BDD play the same role as design requirements in
plan-and-document.</em></p>
<blockquote>
<div><p>True.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= chapter_path(chapter_id: 7) %>" title="previous page"><span class="section-number">7. </span>Requirements: BDD and User Stories</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 7, section_id: 2) %>" title="next page"><span class="section-number">7.2. </span>SMART User Stories</a>

        </div>
        
        </div>
    </div>
