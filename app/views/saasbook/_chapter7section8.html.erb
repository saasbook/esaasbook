    
    <div id="main-content" class="row">
        <div class="col-12 col-md-9 pl-md-3 pr-md-0">
        
              <div>
                
  <div class="section" id="explicit-vs-implicit-and-imperative-vs-declarative-scenarios">
<h1><span class="section-number">7.8. </span>Explicit vs. Implicit and Imperative vs. Declarative Scenarios<a class="headerlink" href="#explicit-vs-implicit-and-imperative-vs-declarative-scenarios" title="Permalink to this headline">¶</a></h1>
<p>Now that we have seen user stories and Cucumber in action, we are ready to cover two important testing topics
that involve contrasting perspectives.</p>
<p>The first is <em>explicit versus implicit requirements</em>. A large part of the formal specification in plan-and-document
is requirements, which in BDD are user stories developed by the stake- holders. Using the terminology from Chapter 1,
they typically correspond to acceptance tests. Implicit requirements are the logical consequence of explicit requirements,
and typically cor- respond to what Chapter 1 calls integration tests. An example of an implicit requirement in
RottenPotatoes might be that by default movies should be listed in chronological order by release date.</p>
<p>The good news is that you can use Cucumber to kill two birds with one stone—create acceptance tests <em>and</em> integration
tests—if you write user stories for both explicit and implicit requirements. (The next chapter shows how to use
another tool for unit testing.)</p>
<p>To see why, suppose we want to write a feature that specifies that movies should appear
in alphabetical order on the list of movies page. For example, “Zorro” should appear after
“Apocalypse Now”, even if “Zorro” was added first. It would be the height of tedium to
express this scenario naively, because it mostly repeats lines from our existing “add movie”
scenario—not very DRY:</p>
<div class="highlight-cucumber notranslate"><div class="highlight"><pre><span></span><span class="k">Feature:</span><span class="nf"> movies should appear in alphabetical order, not added order</span>

<span class="k">Scenario:</span><span class="nf"> view movie list after adding 2 movies (imperative and non-DRY)</span>

<span class="k">    Given </span><span class="nf">I am on the RottenPotatoes home page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I follow &quot;</span><span class="s">Add new movie</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the Create New Movie page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I fill in &quot;</span><span class="s">Title</span><span class="nf">&quot; with &quot;</span><span class="s">Zorro</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">PG</span><span class="nf">&quot; from &quot;</span><span class="s">Rating</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Save Changes</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the RottenPotatoes home page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I follow &quot;</span><span class="s">Add new movie</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the Create New Movie page</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">I fill in &quot;</span><span class="s">Title</span><span class="nf">&quot; with &quot;</span><span class="s">Apocalypse Now</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I select &quot;</span><span class="s">R</span><span class="nf">&quot; from &quot;</span><span class="s">Rating</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Save Changes</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should be on the RottenPotatoes home page</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Apocalypse Now</span><span class="nf">&quot; before &quot;</span><span class="s">Zorro</span><span class="nf">&quot; on the RottenPotatoes home page sorted by title</span>
</pre></div>
</div>
<p>Cucumber is supposed to be about <em>behavior</em> rather than implementation—focusing on
<em>what</em> is being done—yet in this poorly-written scenario, only line 18 mentions the behavior of interest!</p>
<p>An alternative approach is to think of using the step definitions to make a <em>domain language</em> (which is different
from a formal <strong>Domain Specific Language (DSL)</strong>) for your application. A domain language is informal but uses terms
and concepts specific to your application, rather than generic terms and concepts related to the implementation
f the user interface. Steps written in a domain language are typically more declarative than imperative in that
they describe the state of the world rather than the sequence of steps to get to that state and they are less
dependent on the details of the user interface.</p>
<p>A declarative version of the above scenario might look like this:</p>
<div class="highlight-cucumber notranslate"><div class="highlight"><pre><span></span><span class="k">Given </span><span class="nf">/I have added &quot;</span><span class="s">(.*)</span><span class="nf">&quot; with rating &quot;</span><span class="s">(.*)</span><span class="nf">&quot;/ do |title, rating|</span>
<span class="nf">    steps %Q{</span>
<span class="nf">        </span><span class="k">Given </span><span class="nf">I am on the Create New Movie page</span>
<span class="nf">        </span><span class="k">When </span><span class="nf"> I fill in &quot;</span><span class="s">Title</span><span class="nf">&quot; with &quot;</span><span class="s">#{title}</span><span class="nf">&quot;</span>
<span class="nf">        </span><span class="k">And </span><span class="nf">  I select &quot;</span><span class="s">#{rating}</span><span class="nf">&quot; from &quot;</span><span class="s">Rating</span><span class="nf">&quot;</span>
<span class="nf">        </span><span class="k">And </span><span class="nf">  I press &quot;</span><span class="s">Save Changes</span><span class="nf">&quot;</span>
<span class="nf">    }</span>
<span class="nf">end</span>

<span class="k">Then </span><span class="nf">/I should see &quot;</span><span class="s">(.*)</span><span class="nf">&quot; before &quot;</span><span class="s">(.*)</span><span class="nf">&quot; on (.*)/ do |string</span><span class="s">1</span><span class="nf">, string</span><span class="s">2</span><span class="nf">, path|</span>
<span class="nf">    steps %Q{Given I am on #{path}}</span>
<span class="nf">    regexp = /#{string</span><span class="s">1</span><span class="nf">}.*#{string</span><span class="s">2</span><span class="nf">}/m #  /m means match across newlines</span>
<span class="nf">    expect(page.body).to match(regexp)</span>
<span class="nf">end</span>
</pre></div>
</div>
<p>The declarative version is obviously shorter, easier to maintain, and easier to understand since the text
describes the state of the app in a natural form: “I am on the RottenPotatoes home page sorted by title.”</p>
<div class="highlight-cucumber notranslate"><div class="highlight"><pre><span></span><span class="k">Feature:</span><span class="nf"> movies should appear in alphabetical order, not added order</span>

<span class="k">Scenario:</span><span class="nf"> view movie list after adding movie (declarative and DRY)</span>

<span class="k">    Given </span><span class="nf">I have added &quot;</span><span class="s">Zorro</span><span class="nf">&quot; with rating &quot;</span><span class="s">PG-13</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">And </span><span class="nf">  I have added &quot;</span><span class="s">Apocalypse Now</span><span class="nf">&quot; with rating &quot;</span><span class="s">R</span><span class="nf">&quot;</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf"> I should see &quot;</span><span class="s">Apocalypse Now</span><span class="nf">&quot; before &quot;</span><span class="s">Zorro</span><span class="nf">&quot; on the RottenPotatoes home page sorted by title</span>
</pre></div>
</div>



<p>The good news is that, as Figure 7.5 shows, you can reuse your existing imperative steps to implement such
scenarios. This is a very powerful form of reuse, and as your app evolves, you will find yourself reusing
steps from your first few imperative scenarios to create more concise and descriptive declarative scenarios.
Declarative, domain-language-oriented scenar- ios focus the attention on the feature being described rather
than the low-level steps you need to set up and perform the test.</p>
<p><strong>Self-Check 7.8.1.</strong> <em>True or False: Explicit requirements are usually defined with imperative scenarios and
implicit requirements are usually defined with declarative scenarios.</em></p>
<blockquote>
<div><p>False. These are two independent classifications; both requirements can use either type of scenarios.</p>
</div></blockquote>
</div>


              </div>
              
        
        <div class='prev-next-bottom'>
            
    <a class='left-prev' id="prev-link" href="<%= section_path(chapter_id: 7, section_id: 7) %>" title="previous page"><span class="section-number">7.7. </span>CHIPS: Intro to BDD and Cucumber</a>
    <a class='right-next' id="next-link" href="<%= section_path(chapter_id: 7, section_id: 9) %>" title="next page"><span class="section-number">7.9. </span>The Plan-And-Document Perspective on Documentation</a>

        </div>
        
        </div>
    </div>
